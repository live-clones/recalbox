#!/bin/bash

if test "$1" != "start"
then
  exit 0
fi

# Installation image
if [ -f /tmp/.install.sh ]; then
    ( /tmp/.install.sh installstuff ) &
fi

source /recalbox/scripts/recalbox-includes.sh

IN=/recalbox/share_init
UPGRADE=/recalbox/share_upgrade
OUT=/recalbox/share


# force the creation of some directories
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[1] - Forcing creation of directories"
for DIR in cheats \
           themes \
           externals/{usb0,usb1,usb2,usb3,usb4,usb5,usb6,usb7,network0,network1,network2,network3} \
           system/.cache \
           system/.config/lirc \
           system/.config/residualvm \
           system/.config/scummvm \
           system/.config/retroarch \
           system/.emulationstation/themes \
           system/bluetooth \
           system/configs \
           system/logs \
           system/upgrade
do
    if test ! -e "$OUT""/""$DIR"
    then
        mkdir -p "$OUT""/""$DIR"
    fi
done

# link folders using mount point so that is works on any partition
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[2] - Linking directories"
OLDIFS=$IFS
IFS=','
for DIRS in /usr/share/retroarch/assets,system/.config/retroarch/assets \
            /overlay/bootvideos,bootvideos \
            /recalbox/system/arcade/dats,arcade
do
    set -- $DIRS
    TARGET=$1
    SOURCE=$OUT/$2
    if test ! -e "$SOURCE"
    then
	   mkdir -p "$SOURCE"
    fi
    mount --bind "$TARGET" "$SOURCE"
done
IFS=$OLDIFS

# Installation image
if [ -f /tmp/.install.sh ]; then
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[3] - Running /tmp/.install.sh installgames"
    ( /tmp/.install.sh installgames ) &
fi

# directories / files to copy when initializing the user data
#
# NO UPDATE IS POSSIBLE ON THESE DIRECTORIES WHEN RECALBOX IS UPDATED
#
# there are almost empty, it's just for the structure
# the user can delete the directory, it will recreate the structure
# the user can delete files, files will not be recreated
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[4] - Copying share_init directories"
for FILE in music bios extractions kodi saves saves/amiga screenshots userscripts \
            system/.config/lirc/lircd.conf \
            system/.config/residualvm/residualvm.ini \
            system/.config/scummvm/scummvm.ini \
            system/.emulationstation/{es_input.cfg,es_settings.cfg} \
            system/{.hatari,.kodi,.atari800.cfg} \
            system/configs/{advancemame,daphne,dolphin-emu,dosbox,fba,kodi,moonlight,mupen64,openbor,ppsspp,reicast,retroarch,shadersets,xarcade2jstick,scummvm} \
            system/configs/mupen64/{GLideN64.custom.ini,GLideN64.ini,Glide64mk2.ini,InputAutoCfg.ini,RiceVideoLinux.ini,font.ttf,gles2n64.conf,gles2n64rom.conf} \
            system/recalbox.conf \
            bios/{amiga,Databases,dc,fba,fbneo,keropi,Machines,mame,mame2000,mame2003,mame2003-plus,mame2010,mame2015,mame2016,np2kai,oricutron,prboom,quasi88,xmil}
do
    # not wanted for kodi
    test -e "$IN""/""$FILE" && test ! -e "$OUT""/""$FILE" && cp -r "$IN""/""$FILE" "$OUT""/""$FILE"
done

# Since 7.2, rom folders are no longer copied to the SHARE partition
# Instead, just create the folder and copy text files
#
# ONLY NEW DIRECTORIES ARE UPDATED WHEN RECALBOX IS UPDATED
#
# the user can't delete any directory, otherwise, it will recreate it
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[5] - Copying roms .txt files"
for DIR in roms
do
    [ ! -e "$OUT""/""$DIR" ] && mkdir "$OUT""/""$DIR"
    recreatedFolders=$(find "$IN""/""$DIR" -mindepth 1 -maxdepth 1 -type d)
    for SUBDIR in $recreatedFolders
    do
        # Create dir & copy *.txt
        BNAME=$(echo ${SUBDIR##*/})
        TDIR="$OUT""/""$DIR""/""$BNAME"
        if [ ! -e "$TDIR" ] ; then
            mkdir -p "$TDIR"
            find "$SUBDIR" -name "_*.txt" -exec cp {} "$TDIR" \;
        fi
        # Sync overlays with roms
        if test $DIR = "roms" ; then
            TDIR="$OUT""/overlays/""$BNAME"
            if [ ! -e "$TDIR" ] ; then
                mkdir -p "$TDIR"
            fi
        fi
    done
done

# Since 8.0, share is versioned
# so that we can update some file automatically
#
RECALBOX_VERSION_FILE="/recalbox/recalbox.version"
RECALBOX_VERSION=$(cat "$RECALBOX_VERSION_FILE")
SHARE_VERSION_FILE="/recalbox/share/system/.share.version"
SHARE_VERSION=$(cat "$SHARE_VERSION_FILE" 2>/dev/null)

function startMpvQueue {
    touch /tmp/.mpvqueue
    (
        while [ -f /tmp/.mpvqueue ];do
            if ! pgrep mpv; then
                if [ -f /tmp/.mpvqueuevideos ] && [ $(wc -l < /tmp/.mpvqueuevideos) -gt 0 ]; then
                    touch /tmp/.mpvqueuevideos.runned
                    video=$(head -n1 /tmp/.mpvqueuevideos)
                    cp /tmp/.mpvqueuevideos /tmp/.mpvqueuevideos.save
                    tail -n+2 /tmp/.mpvqueuevideos.save > /tmp/.mpvqueuevideos
                    mpv $video
                fi
            fi
            sleep 1
        done
    )&
}

function stopMpvQueue {
    if [ -f /tmp/.mpvqueuevideos.runned ];then
        killall mpv
    fi
    rm -f /tmp/.mpvqueue /tmp/.mpvqueuevideos.save /tmp/.mpvqueuevideos /tmp/.mpvqueuevideos.runned
}

function addMpvNextVideo {
    newVideo="$@"
    echo "${newVideo}" >> /tmp/.mpvqueuevideos
}

if [ "$RECALBOX_VERSION" != "$SHARE_VERSION" ] ; then
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.0] - The system has been updated, copying share_init"
    # Starting the video
    source /recalbox/scripts/recalbox-utils.sh
    IMAGE_PATH=$(getInstallUpgradeImagePath)
    # If it's first install, the slides are running
    if [ ! -f /tmp/.first-install ];then
        startMpvQueue
        addMpvNextVideo $(getMpvOptions) --loop "${IMAGE_PATH}/creating-share.mp4" & echo $! > /tmp/.mpv.pid
    fi
    # Copy all bios from share_upgrade to share
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.1] - BIOS"
    rsync --size-only -r "${UPGRADE}/bios/." "${OUT}/bios"

    # Copy all readme files from share_upgrade to share
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.2] - ROMS"
    rsync --size-only -r "${UPGRADE}/roms/." "${OUT}/roms"

    # Remove those .xxx files once copy is done in share - this doesn't occur in ports
    rm -f "${OUT}/roms/.keep"
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.3] - REMOVING PLACEHOLDERS IN ROMS"
    readarray -d '' romFolders < <(find "${OUT}/roms" -mindepth 1 -maxdepth 1 -type d -print0)
    for systemFolder in "${romFolders[@]}"
    do
        systemName=$(echo ${systemFolder##*/})
        destinationFolder="${OUT}/roms/${systemName}"
        rm -f "${OUT}/roms/${systemName}/.readme.placeholder"
    done

    # Do the same in ports
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.4] - REMOVING PLACEHOLDERS IN PORTS"
    readarray -d '' romFolders < <(find "${OUT}/roms/ports" -mindepth 1 -maxdepth 1 -type d -print0)
    for systemFolder in "${romFolders[@]}"
    do
        systemName=$(echo ${systemFolder##*/})
        destinationFolder="${OUT}/roms/ports/${systemName}"
        rm -f "${OUT}/roms/ports/${systemName}/.keep"
        rm -f "${OUT}/roms/ports/${systemName}/.readme.placeholder"
    done

    # Not sure why but there is some .txt file in /roms/ports which should not be here and are a copy of a port - remove them
    rm -f "${OUT}/roms/ports/_leggime.txt"
    rm -f "${OUT}/roms/ports/_leiame.txt"
    rm -f "${OUT}/roms/ports/_liesmich.txt"
    rm -f "${OUT}/roms/ports/_lisezmoi.txt"
    rm -f "${OUT}/roms/ports/_readme.txt"

    # Update shaders
    shaders_md5_file="${OUT}/shaders/.last-upgrade.md5"
    shaders_tar="${IN}/shaders.tar.xz"
    if ! md5sum -c "${shaders_md5_file}";then
        recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.5.1] - Updating shaders"
        tar xJf "${shaders_tar}" -C "${OUT}/"
        md5sum "${shaders_tar}" > "${shaders_md5_file}"
        recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.5.2] - Saving shader version"
    fi

    # Since 7.2, ports may behave as:
    # - ReadOnly: The port is self-sufficient and stays in share_init
    # - Read/Write: The user must add content to the port or may extend the port by adding extra-content
    #
    # This loop take Read/Write ports and copy them to the share
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.6] - Copying read-write ports"
    IFS_BAK=$IFS
    IFS=$'\n'
    set -f
    for file in $(xml sel -t -v "//descriptor[@readonly='0']/@path" /recalbox/share_init/system/.emulationstation/systemlist.xml); do
        FILE_PATH_IN_SHARE="${file#'%ROOT%/'}"
        DSTDIR="/recalbox/share/roms/${FILE_PATH_IN_SHARE}"
        SRCDIR="/recalbox/share_init/roms/${FILE_PATH_IN_SHARE}"
        rsync --size-only -r "$SRCDIR" "$(dirname "$DSTDIR")"
    done
    set +f
    IFS=$IFS_BAK

    # Update version
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[7.7] - Copy version to share"
    cp "$RECALBOX_VERSION_FILE" "$SHARE_VERSION_FILE"
fi

# directories to force directories exists
# files are linked
#
# ONLY NEW DIRECTORIES ARE UPDATED WHEN RECALBOX IS UPDATED
#
# the user can't delete any directory, otherwise, it will recreate it, with link inside
# the user can delete links and add its own files
# to reset the directory or update it, the user has to remove the directory (we are unable to differenciate new files from recalbox update from a file removed by the user)
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[8] - An other copy of configs and overlays"
for DIR in system/configs overlays
do
    [ ! -e "$OUT""/""$DIR" ] && mkdir "$OUT""/""$DIR"
    recreatedFolders=$(find "$IN""/""$DIR" -mindepth 1 -maxdepth 1 -type d)
    for SUBDIR in $recreatedFolders
    do
        BNAME=$(echo ${SUBDIR##*/})
        TDIR="$OUT""/""$DIR""/""$BNAME"
        if test ! -e "$TDIR" # ASSUME THAT PARENTS ARE LISTED BEFORE CHILDREN
        then
            cp -r "$SUBDIR" "$TDIR"
        fi
    done
done

# recalbox.conf : upgrade if necessary
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[9] - Do upgrade if necessary"
doRecalboxUpgrades

# ssh : create the ssh key while the -R option of dropbear try a chown or an operation which is not permitted on fat32
# use /tmp pass-thru to avoid operation not permitted error on fat32
if ! test -e /recalbox/share/system/ssh
then
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[10] - Dropbear"
    mkdir -p /recalbox/share/system/ssh
    dropbearkey -t ecdsa -f /tmp/dropbear_ecdsa_host_key
    mv /tmp/dropbear_ecdsa_host_key /recalbox/share/system/ssh/
    dropbearkey -t rsa   -f /tmp/dropbear_rsa_host_key
    mv /tmp/dropbear_rsa_host_key /recalbox/share/system/ssh/
    dropbearkey -t dss   -f /tmp/dropbear_dss_host_key
    mv /tmp/dropbear_dss_host_key /recalbox/share/system/ssh/
fi

# bluetooth : untar last bluetooth settings
# This is a migration process which should run once.
# The tar file is removed and all settings are savec in
# /overlay/.configs/lib/bluetooth since #1523
btTar=/recalbox/share/system/bluetooth/bluetooth.tar
if test -e "$btTar"
then
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[11] - Bluetooth"
    tar xf "$btTar" --strip-components=1 -C /overlay/.configs/ >/dev/null && rm "$btTar"
fi

# udev : create a link for rules persistance
if test ! -e /recalbox/share/system/udev/rules.d
then
    recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[12] - UDEV"
    mkdir -p /recalbox/share/system/udev/rules.d
fi
mkdir -p /run/udev/rules.d
mount --bind /recalbox/share/system/udev/rules.d /run/udev/rules.d

# create a uuid if it's missing
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[13] - UUID"
[ ! -e /recalbox/share/system/uuid ] && /recalbox/scripts/system/uuid.sh --uuid-file /recalbox/share/system/uuid

# build the cores list if it doesn't exist
recallog -s "${INIT_SCRIPT}" -t "POPULATE" "[14] - CORE LIST"
[ ! -e /recalbox/share/system/configs/retroarch.corenames ] && upgradeRetroarchCoreNames -f /recalbox/share/system/configs/retroarch.corenames

# END

stopMpvQueue