#!/bin/bash

if [ "$1" = "stop" ]; then
  INIT_SCRIPT=$(basename "$0")

  # Backup recalbox.conf to /boot partition
  mount -o remount,rw /boot
  cp /recalbox/share/system/recalbox.conf /boot/recalbox-backup.conf
  sed -i '1s/^/#THIS IS A BACKUP OF RECALBOX.CONF\n#PLEASE DO NOT MAKE ANY CHANGE HERE !!!\n\n\n/' /boot/recalbox-backup.conf
  mount -o remount,ro /boot
  sync
  recallog -s "${INIT_SCRIPT}" -t "BACKUP" "recalbox.conf saved to /boot partition"
  # umount all network configs
  # don't just remount the one of the config in case the config changed
  umount -a -t nfs
  umount -a -t cifs
  exit 0
fi

if [ "$1" != "start" ]; then
  exit 0
fi

# Declare some constants
bootConfigFile="/boot/recalbox-boot.conf"

# Detect (or predict) partitions
bootPartition=$(/recalbox/scripts/recalbox-part.sh boot)
sharePartition=$(/recalbox/scripts/recalbox-part.sh share)
overlayPartition=$(/recalbox/scripts/recalbox-part.sh overlay)
bootDevice=$(/recalbox/scripts/recalbox-part.sh prefix "${bootPartition}")

# load utilities
# shellcheck disable=SC1091
[ -f /recalbox/scripts/recalbox-utils.sh ] && source /recalbox/scripts/recalbox-utils.sh

# maxWaitFromConfig
#   → outputs the `sharewait` directive value from /boot/recalbox-boot.conf
#     (default: 7 in `DEV [FSUUID]` and `ANYEXTERNAL` mode, 20 in `NETWORK` mode)
maxWaitFromConfig() {
  local sharewaitValue=$(sed -nr 's/^sharewait=([0-9]+).*$/\1/p' "${bootConfigFile}")

  case "${shareDeviceMode}" in
    "NETWORK") local defaultValue="30" ;;
    *) local defaultValue="30" ;;
  esac
  echo ${sharewaitValue:-${defaultValue}}
}

# createMissingPartitions
#   → creates SHARE and OVERLAY partitions on internal device (SD-card or internal HDD)
#     displays a loading screen during the process
#     uses same partition type as BOOT partition (primary or logical) to ensure partition numbers continuity
#     creates their filesystem (exfat for SHARE, ext4 for OVERLAY)
createMissingPartitions() {
  alignSize=$((1024 * 1024)) # Align partition on megabyte
  overlayPartitionSize=$((1024 * 1024 * 1024)) # OVERLAY partition will be 1GB
  defaultPartedOptions=("-m" "-s" "-a" "optimal" "${bootDevice}" "unit" "b")
  partitionType=$(/recalbox/scripts/recalbox-part.sh type "${bootPartition}")

  # Utility helper to compute optimized partition alignment
  alignToUpperBlock() {
    local address="${1}"
    echo $(( (address + alignSize) / alignSize * alignSize ))
  }

  # Display SHARE creation splash screen
  touch /tmp/.first-install
  if [ -f /tmp/.install.sh ]; then
      ( /tmp/.install.sh createshare ) &
  else
      /recalbox/scripts/recalbox-play-first-install-media.sh
  fi

  # Determine last free (available) space on device
  freeSpaceStart=$(parted "${defaultPartedOptions[@]}" print free | grep ':free;$' | tail -1 | cut -d: -f2 | sed 's/B$//')
  freeSpaceEnd=$(parted "${defaultPartedOptions[@]}" print free | grep ':free;$' | tail -1 | cut -d: -f3 | sed 's/B$//')

  # Determine new partitions boundaries
  sharePartitionStart=$(alignToUpperBlock "${freeSpaceStart}")
  overlayPartitionStart=$(alignToUpperBlock $(( freeSpaceEnd - overlayPartitionSize )))
  sharePartitionEnd=$(( overlayPartitionStart - alignSize )) # keep 1MB between partitions, since using `${overlayPartitionStart} - 1` can actually fail on some disks, despite being strictly correct
  overlayPartitionEnd="100%"

  # Create SHARE partition and filesystem
  parted "${defaultPartedOptions[@]}" mkpart "${partitionType}" ntfs "${sharePartitionStart}" "${sharePartitionEnd}" # ExFAT uses the same type code than NTFS (0x07) in MBR partition tables
  mkexfatfs -n SHARE "${sharePartition}"

  # Display OVERLAY creation splash screen
  if [ -f /tmp/.install.sh ]; then
      ( /tmp/.install.sh createoverlay ) &
  fi

  # Create OVERLAY partition and filesystem
  parted "${defaultPartedOptions[@]}" mkpart "${partitionType}" "${overlayPartitionStart}" "${overlayPartitionEnd}"
  mkfs.ext4 "${overlayPartition}" -q -F -L OVERLAY
  e2fsck -f -p "${overlayPartition}"
}

# TODO: rewrite and document
mountDeviceOrFallback() {
  device=$1
  filesystemType=$2
  RECALBOXFULLFS="/var/recalboxfs"
  FALLBACK=1

  if test -n "${device}" ; then
    if mkdir -p "${RECALBOXFULLFS}" ; then
      if /recalbox/scripts/recalbox-mount.sh "${filesystemType}" 1 "${device}" "${RECALBOXFULLFS}" ; then
        if mkdir -p "${RECALBOXFULLFS}/recalbox" ; then
          if mount "${RECALBOXFULLFS}/recalbox" "/recalbox/share" -o "noatime" ; then
            FALLBACK=0
          fi
        fi
      fi
    fi
  fi

  if test "${FALLBACK}" = 1 ; then
    if ! /recalbox/scripts/recalbox-mount.sh exfat 1 "${sharePartition}" /recalbox/share ; then
      mount -t tmpfs -o size=128M tmpfs /recalbox/share
    fi
  fi
}

# blkidForUUID <UUID>
#   → outputs the output line of `blkid` for the device with given <UUID>
blkidForUUID() {
  local UUID="${1}"

  blkid | grep " UUID=\"${UUID}\""
}

# waitForDeviceWithUUID <UUID>
#   → sleeps until device with given <UUID> is available
waitForDeviceWithUUID() {
  local UUID="${1}"
  local maxwait="$(maxWaitFromConfig)"

  while [ -z "$(blkidForUUID "${UUID}")" ] && [ "${maxwait}" -gt 0 ]; do
    maxwait=$(( maxwait - 1 ))
    sleep 1
  done
}

# firstBlkidForExternalDevice
#   → outputs the output line of `blkid` for any given storage device which is not the one already used to boot (thus, probably external)
firstBlkidForExternalDevice() {
  blkid | grep -v "^${bootDevice}" | head -1
}

# waitForAnyExternalDevice
#   → sleeps until an external storage device is available
waitForAnyExternalDevice() {
  local maxwait="$(maxWaitFromConfig)"

  while [ -z "$(firstBlkidForExternalDevice)" ] && [ "${maxwait}" -gt 0 ]; do
    maxwait=$(( maxwait - 1 ))
    sleep 1
  done
}

# executeNetworkMountDirective <directiveType> <directive>
#   → process a `sharenetwork_*` directive
#     <directiveType> can be one of "smb", "nfs" or "cmd"
#     when <directiveType> is "cmd", <directive> is a plain old command to run
#     when <directiveType> is "smb" or "nfs", <directive> must match the following format:
#       <SHARE|ROMS|SAVES|BIOS|MUSIC>@<remote host>:<remote directory>:<mount options>
#     returns: 0 on success
#              1 on command execution error (retries should be performed)
#              2 on input error (no retry should be performed, they will fail too)
executeNetworkMountDirective() {
  local directiveType="$(echo ${1} | sed -r 's/[0-9]+$//')" # Note: for backward-compatibility (or user-preference), `directiveType` may be suffixed with a number (e.g. `_smb1`, `_smb2`) but it's ignored (like it has actually always been, despite being documented)
  local directive="${2}"
  local logFile="/tmp/mountNetwork.log"

  if [ "${directiveType}" = "cmd" ]; then
    commandToRun="${directive}"
  else
    IFS=$'\t' read -r target remoteHost remotePath mountOptions < <(
      echo "${directive}" | sed -r 's|^([^@]+)@([^:]+):([^:]+):?(.*)|\1\t\2\t\3\t\4|'
    )
    case "${target}" in
      "SHARE") mountPoint="/recalbox/share" ;;
      "ROMS") mountPoint="/recalbox/share/roms" ;;
      "SAVES") mountPoint="/recalbox/share/saves" ;;
      "BIOS") mountPoint="/recalbox/share/bios" ;;
      "MUSIC") mountPoint="/recalbox/share/music" ;;
      "OVERLAYS") mountPoint="/recalbox/share/overlays" ;;
      "SCREENSHOTS") mountPoint="/recalbox/share/screenshots" ;;
      "SHADERS") mountPoint="/recalbox/share/shaders" ;;
      "SCRIPTS") mountPoint="/recalbox/share/userscripts" ;;
      "ROMS0") mountPoint="/recalbox/share/externals/network0" ;;
      "ROMS1") mountPoint="/recalbox/share/externals/network1" ;;
      "ROMS2") mountPoint="/recalbox/share/externals/network2" ;;
      "ROMS3") mountPoint="/recalbox/share/externals/network3" ;;
      *)
        echo "Invalid mount target '${target}'. Ignoring directive 'sharenetwork_${1}=${directive}'." | tee -a "${logFile}" >&2
        return 2
        ;;
    esac

    case "${directiveType}" in
      "nfs")
        defaultMountOptions="-o port=2049,nolock,proto=tcp"
        [ -n "${mountOptions}" ] && mountOptions=",${mountOptions}"
        commandToRun="mkdir -p ${mountPoint} && mount ${defaultMountOptions}${mountOptions} ${remoteHost}:${remotePath} ${mountPoint}"
        ;;
      "smb")
        [ -n "${mountOptions}" ] && mountOptions="-o ${mountOptions}"
        commandToRun="mkdir -p ${mountPoint} && mount.cifs ${mountOptions} //${remoteHost}/${remotePath} ${mountPoint}"
        ;;
      *)
        echo "Invalid directive type '${directiveType}'. Ignoring directive 'sharenetwork_${1}=${directive}'." | tee -a "${logFile}" >&2
        return 2
        ;;
    esac
  fi

  echo "${commandToRun}" >> "${logFile}"
  eval "${commandToRun}"
}

# mountNetwork
#   → execute all `sharenetwork_*` commands in recalbox-boot.conf, retrying them for a while if they failed
mountNetwork() {
  sed -nr 's/^sharenetwork_([^=]+)=(.*)$/\1\t\2/p' "${bootConfigFile}" | while read directiveType directive; do
    local maxwait="$(maxWaitFromConfig)"

    while [ "${maxwait}" -gt 0 ]; do
      if executeNetworkMountDirective "${directiveType}" "${directive}" || [ $? = 2 ] ; then # do not retry if executeNetworkMountDirective succeeded or returned 2 (input error)
        break
      else
        maxwait=$(( maxwait - 1 ))
        sleep 1
      fi
    done
  done
}

# mountTmpfs
#   → mounts a 128MB tmpfs as SHARE
mountTmpfs() {
  mount -t tmpfs -o size=128M tmpfs /recalbox/share
}

# mountInternal
#   → mounts internal drive (SD-card or internal HDD) as SHARE
#     fallback to a tmpfs if it fails
mountInternal() {
  if ! /recalbox/scripts/recalbox-mount.sh exfat 1 "${sharePartition}" /recalbox/share ; then
    mountTmpfs # as fallback
  fi
}

# partitionHasAFilesystem <partition>
#   → returns success (0) if a filesystem is detected in the given partition (block device)
#     returns failure (1) otherwise
#   NOTE: Busybox implementation of `blkid` is very scarce: it supports no option at all
#         and symply displays all tags when a filesystem is detected, nothing otherwise
partitionHasAFilesystem() {
  local partition="${1}"

  [ -n "$(blkid "${partition}")" ]
}

########
# MAIN #
########

# Create SHARE and OVERLAY partitions if they do not exist
# (we do this regardless of `sharedevice` mode configured below)
if [ ! -b "${sharePartition}" ]; then
  createMissingPartitions
fi

# Create ExFAT filesystem in SHARE partition if it does not exist
# (this is the case on first boot after NOOBS partition, because
# NOOBS does not support creating ExFAT filesystems)
if ! partitionHasAFilesystem "${sharePartition}"; then
  mkexfatfs -n SHARE "${sharePartition}"
fi

# Read `sharedevice` in /boot/recalbox-boot.conf, it can contain:
#   INTERNAL     => [default] the partition immediately following the partition mounted as /boot, on the same disk (e.g. `/dev/mmcblk0p2` if `/dev/mmcblk0p1` is mounted as `/boot`)
#   RAM          => tmpfs
#   ANYEXTERNAL  => any device found other than the one used to boot
#   DEV [FSUUID] => a device having the FSUUID uuid
#   NETWORK      => mount from network (either NFS, SMB or with completely custom mount commands)
# (read detailed user documentation in recalbox-boot.conf)
shareDeviceMode=$(sed -nr 's/^sharedevice=(.+)$/\1/p' ${bootConfigFile})
[ $? -ne "0" -o -z "${shareDeviceMode}" ] && shareDeviceMode="INTERNAL"

# Check if current board supports mounting USB share
# if not then force INTERNAL
if ! doesBoardSupportExternalShare; then
  if [ "$shareDeviceMode" = "ANYEXTERNAL" ] || [[ "$shareDeviceMode" =~ ^DEV ]]; then
    logger -t S11share "forcing INTERNAL share device"
    logger -t S11share "your board does not support mounting ANYEXTERNAL or DEV share device"
    shareDeviceMode=INTERNAL
  fi
fi

# Mount SHARE from configured source in /boot/recalbox-boot.conf
case "${shareDeviceMode}" in
  "DEV "*)
    UUID=$(echo "${shareDeviceMode}" | sed 's/^DEV //')
    waitForDeviceWithUUID "${UUID}"
    device=$(blkidForUUID "${UUID}" | cut -d: -f1)
    filesystemType=$(blkidForUUID "${UUID}" | sed -r 's/^.* TYPE="([^"]*)".*/\1/')
    mountDeviceOrFallback "${device}" "${filesystemType}"
    ;;
  "ANYEXTERNAL")
    waitForAnyExternalDevice
    device=$(firstBlkidForExternalDevice | cut -d: -f1)
    filesystemType=$(firstBlkidForExternalDevice | sed 's|^.* TYPE="\([^"]*\)".*$|\1|')
    mountDeviceOrFallback "${device}" "${filesystemType}"
    ;;
  "RAM")
    mountTmpfs
    ;;
  "INTERNAL"|"NETWORK"|*) # this allows network mounts for some targets only (roms, saves, bios, music, …)
    mountInternal
    ;;
esac
# Mount remote folders & additionel shares
mountNetwork > /tmp/mountNetwork.log 2> /tmp/mountNetwork.err

# Now, let's mount delayed usbmount devices
ls /var/run/usbmount.delay |
    while read -r RULE ; do
        RTYPE=$(echo "${RULE}" | sed -e s+'^[0-9]*\.'++)
        (
            source "/var/run/usbmount.delay/${RULE}"
            /usr/share/usbmount/usbmount "${RTYPE}"
            rm "/var/run/usbmount.delay/${RULE}"
        )
    done
touch /var/run/recalbox.share.mounted # reenable standard usbmount
