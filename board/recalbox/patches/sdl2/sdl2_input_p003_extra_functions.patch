From e5bdef40d2b42b40e0d8f02f82b6f9731e3b2d18 Mon Sep 17 00:00:00 2001
From: David Barbion <davidb@230ruedubac.fr>
Date: Wed, 8 Mar 2023 23:02:52 +0100
Subject: [PATCH] sdl2 input p003 extra functions

---
 include/SDL_joystick.h                 |  5 +++
 src/dynapi/SDL_dynapi_overrides.h      |  6 +++
 src/dynapi/SDL_dynapi_procs.h          |  6 +++
 src/joystick/SDL_joystick.c            | 21 +++++++++
 src/joystick/SDL_sysjoystick.h         |  5 +++
 src/joystick/linux/SDL_sysjoystick.c   | 60 ++++++++++++++++++++++++++
 src/joystick/linux/SDL_sysjoystick_c.h |  1 +
 7 files changed, 104 insertions(+)

diff --git a/include/SDL_joystick.h b/include/SDL_joystick.h
index 07d6a2e0a..01aa9cbf5 100644
--- a/include/SDL_joystick.h
+++ b/include/SDL_joystick.h
@@ -421,6 +421,11 @@ extern DECLSPEC int SDLCALL SDL_JoystickDetachVirtual(int device_index);
  */
 extern DECLSPEC SDL_bool SDLCALL SDL_JoystickIsVirtual(int device_index);
 
+extern DECLSPEC const char *SDLCALL SDL_JoystickDevicePathById(int device_index);
+extern DECLSPEC int SDLCALL SDL_JoystickButtonEventCodeById(int device_index, int button);
+extern DECLSPEC int SDLCALL SDL_JoystickAxisEventCodeById(int device_index, int axis);
+extern DECLSPEC int SDLCALL SDL_JoystickHatEventCodeById(int device_index, int hat);
+#define SDL_JOYSTICK_IS_OVERRIDEN_BY_RECALBOX 1
 /**
  * Set values on an opened, virtual-joystick's axis.
  *
diff --git a/src/dynapi/SDL_dynapi_overrides.h b/src/dynapi/SDL_dynapi_overrides.h
index 52ddfafef..2103e4066 100644
--- a/src/dynapi/SDL_dynapi_overrides.h
+++ b/src/dynapi/SDL_dynapi_overrides.h
@@ -209,6 +209,12 @@
 #define SDL_JoystickUpdate SDL_JoystickUpdate_REAL
 #define SDL_JoystickEventState SDL_JoystickEventState_REAL
 #define SDL_JoystickGetAxis SDL_JoystickGetAxis_REAL
+
+#define SDL_JoystickDevicePathById SDL_JoystickDevicePathById_REAL
+#define SDL_JoystickButtonEventCodeById SDL_JoystickButtonEventCodeById_REAL
+#define SDL_JoystickAxisEventCodeById SDL_JoystickAxisEventCodeById_REAL
+#define SDL_JoystickHatEventCodeById SDL_JoystickHatEventCodeById_REAL
+
 #define SDL_JoystickGetHat SDL_JoystickGetHat_REAL
 #define SDL_JoystickGetBall SDL_JoystickGetBall_REAL
 #define SDL_JoystickGetButton SDL_JoystickGetButton_REAL
diff --git a/src/dynapi/SDL_dynapi_procs.h b/src/dynapi/SDL_dynapi_procs.h
index 2180dbfb1..7dfb9fd85 100644
--- a/src/dynapi/SDL_dynapi_procs.h
+++ b/src/dynapi/SDL_dynapi_procs.h
@@ -243,6 +243,12 @@ SDL_DYNAPI_PROC(int,SDL_JoystickNumButtons,(SDL_Joystick *a),(a),return)
 SDL_DYNAPI_PROC(void,SDL_JoystickUpdate,(void),(),)
 SDL_DYNAPI_PROC(int,SDL_JoystickEventState,(int a),(a),return)
 SDL_DYNAPI_PROC(Sint16,SDL_JoystickGetAxis,(SDL_Joystick *a, int b),(a,b),return)
+
+SDL_DYNAPI_PROC(const char*,SDL_JoystickDevicePathById,(int a),(a),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickButtonEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickAxisEventCodeById,(int a, int b),(a,b),return)
+SDL_DYNAPI_PROC(int,SDL_JoystickHatEventCodeById,(int a, int b),(a,b),return)
+
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetHat,(SDL_Joystick *a, int b),(a,b),return)
 SDL_DYNAPI_PROC(int,SDL_JoystickGetBall,(SDL_Joystick *a, int b, int *c, int *d),(a,b,c,d),return)
 SDL_DYNAPI_PROC(Uint8,SDL_JoystickGetButton,(SDL_Joystick *a, int b),(a,b),return)
diff --git a/src/joystick/SDL_joystick.c b/src/joystick/SDL_joystick.c
index b4d6d2edc..95c09ebea 100644
--- a/src/joystick/SDL_joystick.c
+++ b/src/joystick/SDL_joystick.c
@@ -2898,6 +2898,27 @@ SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char *pchGUID)
     return SDL_GUIDFromString(pchGUID);
 }
 
+const char *
+SDL_JoystickDevicePathById(int device_index)
+{
+  return SDL_SYS_JoystickDevicePathById( device_index );
+}
+
+int SDL_JoystickButtonEventCodeById(int device_index, int button)
+{
+  return SDL_SYS_JoystickButtonEventCodeById( device_index, button );
+}
+
+int SDL_JoystickAxisEventCodeById(int device_index, int axis)
+{
+  return SDL_SYS_JoystickAxisEventCodeById( device_index, axis );
+}
+
+int SDL_JoystickHatEventCodeById(int device_index, int hat)
+{
+  return SDL_SYS_JoystickHatEventCodeById( device_index, hat );
+}
+
 /* update the power level for this joystick */
 void SDL_PrivateJoystickBatteryLevel(SDL_Joystick *joystick, SDL_JoystickPowerLevel ePowerLevel)
 {
diff --git a/src/joystick/SDL_sysjoystick.h b/src/joystick/SDL_sysjoystick.h
index 20216bb49..5e40d5e42 100644
--- a/src/joystick/SDL_sysjoystick.h
+++ b/src/joystick/SDL_sysjoystick.h
@@ -250,6 +250,11 @@ extern SDL_JoystickDriver SDL_N3DS_JoystickDriver;
 }
 #endif
 
+extern const char *SDL_SYS_JoystickDevicePathById(int device_index);
+extern int SDL_SYS_JoystickButtonEventCodeById(int device_index, int button);
+extern int SDL_SYS_JoystickAxisEventCodeById(int device_index, int axis);
+extern int SDL_SYS_JoystickHatEventCodeById(int device_index, int hat);
+
 #endif /* SDL_sysjoystick_h_ */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick.c b/src/joystick/linux/SDL_sysjoystick.c
index dc534ba6c..86a83d465 100644
--- a/src/joystick/linux/SDL_sysjoystick.c
+++ b/src/joystick/linux/SDL_sysjoystick.c
@@ -957,6 +957,16 @@ ConfigJoystick(SDL_Joystick *joystick, int fd)
     SDL_bool use_deadzones = SDL_GetHintBoolean(SDL_HINT_LINUX_JOYSTICK_DEADZONES, SDL_FALSE);
     SDL_bool use_hat_deadzones = SDL_GetHintBoolean(SDL_HINT_LINUX_HAT_DEADZONES, SDL_TRUE);
 
+    for(i=0; i<KEY_MAX; i++) {
+      joystick->hwdata->key_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->abs_map[i] = -1;
+    }
+    for(i=0; i<ABS_MAX; i++) {
+      joystick->hwdata->hat_map[i] = -1;
+    }
+
     /* See if this device uses the new unified event API */
     if ((ioctl(fd, EVIOCGBIT(EV_KEY, sizeof(keybit)), keybit) >= 0) &&
         (ioctl(fd, EVIOCGBIT(EV_ABS, sizeof(absbit)), absbit) >= 0) &&
@@ -2090,6 +2100,56 @@ SDL_JoystickDriver SDL_LINUX_JoystickDriver =
     LINUX_JoystickGetGamepadMapping
 };
 
+const char *
+SDL_SYS_JoystickDevicePathById(int device_index)
+{
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return "";
+  return joystick->path;
+}
+
+int SDL_SYS_JoystickButtonEventCodeById(int device_index, int button)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<KEY_MAX; i++) {
+    if(((int)joystick->hwdata->key_map[i]) == button) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickAxisEventCodeById(int device_index, int axis)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->abs_map[i]) == axis) {
+      return i;
+    }
+  }
+  return -1;
+}
+
+int SDL_SYS_JoystickHatEventCodeById(int device_index, int hat)
+{
+  int i;
+  SDL_joylist_item* joystick = JoystickByDevIndex(device_index);
+  if(joystick == NULL) return -1;
+
+  for(i=0; i<ABS_MAX; i++) {
+    if(((int)joystick->hwdata->hat_map[i]) == hat) {
+      return i;
+    }
+  }
+  return -1;
+}
+
 #endif /* SDL_JOYSTICK_LINUX */
 
 /* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/joystick/linux/SDL_sysjoystick_c.h b/src/joystick/linux/SDL_sysjoystick_c.h
index 79e7ab443..2d971ed60 100644
--- a/src/joystick/linux/SDL_sysjoystick_c.h
+++ b/src/joystick/linux/SDL_sysjoystick_c.h
@@ -53,6 +53,7 @@ struct joystick_hwdata
     /* Support for the Linux 2.4 unified input interface */
     Uint8 key_map[KEY_MAX];
     Uint8 abs_map[ABS_MAX];
+    Uint8 hat_map[ABS_MAX];
     SDL_bool has_key[KEY_MAX];
     SDL_bool has_abs[ABS_MAX];
 
-- 
2.39.2

