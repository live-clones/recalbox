From 6e59a18248de7fa4190432daf5aa33a214cc97f3 Mon Sep 17 00:00:00 2001
From: John Cox <jc@kynesim.co.uk>
Date: Mon, 4 Jul 2022 16:22:54 +0100
Subject: [PATCH 123/151] v4l2_req: Support Annex B

---
 libavcodec/v4l2_req_hevc_vx.c | 61 +++++++++++++++++++++++------------
 1 file changed, 41 insertions(+), 20 deletions(-)

diff --git a/libavcodec/v4l2_req_hevc_vx.c b/libavcodec/v4l2_req_hevc_vx.c
index 5474b1f7be..f4d09b7493 100644
--- a/libavcodec/v4l2_req_hevc_vx.c
+++ b/libavcodec/v4l2_req_hevc_vx.c
@@ -877,6 +877,18 @@ static int v4l2_request_hevc_decode_slice(AVCodecContext *avctx, const uint8_t *
     int rv;
     struct slice_info * si;
 
+    // This looks dodgy but we know that FFmpeg has parsed this from a buffer
+    // that contains the entire frame including the start code
+    if (ctx->start_code == V4L2_STATELESS_HEVC_START_CODE_ANNEX_B) {
+        buffer -= 3;
+        size += 3;
+        boff += 24;
+        if (buffer[0] != 0 || buffer[1] != 0 || buffer[2] != 1) {
+            av_log(avctx, AV_LOG_ERROR, "Start code requested but missing %02x:%02x:%02x\n",
+                   buffer[0], buffer[1], buffer[2]);
+        }
+    }
+
     if ((rv = slice_add(rd)) != 0)
         return rv;
 
@@ -967,10 +979,6 @@ static int send_slice(AVCodecContext * const avctx,
         goto fail2;
     }
 
-#warning ANNEX_B start code
-//        if (ctx->start_code == V4L2_MPEG_VIDEO_HEVC_START_CODE_ANNEX_B) {
-//        }
-
     stat = mediabufs_start_request(ctx->mbufs, &req, &src,
                                    i == 0 ? rd->qe_dst : NULL,
                                    is_last);
@@ -1118,6 +1126,12 @@ probe(AVCodecContext * const avctx, V4L2RequestContextHEVC * const ctx)
     return 0;
 }
 
+static inline int
+ctrl_valid(const struct v4l2_query_ext_ctrl * const c, const int64_t v)
+{
+    return v >= c->minimum && v <= c->maximum;
+}
+
 // Final init
 static int
 set_controls(AVCodecContext * const avctx, V4L2RequestContextHEVC * const ctx)
@@ -1140,21 +1154,6 @@ set_controls(AVCodecContext * const avctx, V4L2RequestContextHEVC * const ctx)
 
     mediabufs_ctl_query_ext_ctrls(ctx->mbufs, querys, FF_ARRAY_ELEMS(querys));
 
-    ctx->decode_mode = querys[0].default_value;
-
-    if (ctx->decode_mode != V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED &&
-        ctx->decode_mode != V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED) {
-        av_log(avctx, AV_LOG_ERROR, "%s: unsupported decode mode, %d\n", __func__, ctx->decode_mode);
-        return AVERROR(EINVAL);
-    }
-
-    ctx->start_code = querys[1].default_value;
-    if (ctx->start_code != V4L2_STATELESS_HEVC_START_CODE_NONE &&
-        ctx->start_code != V4L2_STATELESS_HEVC_START_CODE_ANNEX_B) {
-        av_log(avctx, AV_LOG_ERROR, "%s: unsupported start code, %d\n", __func__, ctx->start_code);
-        return AVERROR(EINVAL);
-    }
-
     ctx->max_slices = (!(querys[2].flags & V4L2_CTRL_FLAG_DYNAMIC_ARRAY) ||
                        querys[2].nr_of_dims != 1 || querys[2].dims[0] == 0) ?
         1 : querys[2].dims[0];
@@ -1163,11 +1162,33 @@ set_controls(AVCodecContext * const avctx, V4L2RequestContextHEVC * const ctx)
 #if HEVC_CTRLS_VERSION >= 4
     ctx->max_offsets = (querys[3].type == 0 || querys[3].nr_of_dims != 1) ?
         0 : querys[3].dims[0];
-    av_log(avctx, AV_LOG_INFO, "%s: Entry point offsets %d\n", __func__, ctx->max_offsets);
+    av_log(avctx, AV_LOG_DEBUG, "%s: Entry point offsets %d\n", __func__, ctx->max_offsets);
 #else
     ctx->max_offsets = 0;
 #endif
 
+    ctx->start_code = V4L2_STATELESS_HEVC_START_CODE_ANNEX_B;
+
+    if (ctrl_valid(querys + 0, V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED))
+    {
+        ctx->decode_mode = V4L2_STATELESS_HEVC_DECODE_MODE_SLICE_BASED;
+
+        // Prefer NONE as it doesn't require the slightly dodgy look
+        // backwards in our raw buffer
+        if (ctrl_valid(querys + 1, V4L2_STATELESS_HEVC_START_CODE_NONE))
+            ctx->start_code = V4L2_STATELESS_HEVC_START_CODE_NONE;
+        else if (ctrl_valid(querys + 1, V4L2_STATELESS_HEVC_START_CODE_ANNEX_B))
+            ctx->start_code = V4L2_STATELESS_HEVC_START_CODE_ANNEX_B;
+        else {
+            av_log(avctx, AV_LOG_ERROR, "%s: unsupported start code\n", __func__);
+            return AVERROR(EINVAL);
+        }
+    }
+    else
+    {
+        av_log(avctx, AV_LOG_ERROR, "%s: unsupported decode mode\n", __func__);
+    }
+
     ctrls[0].value = ctx->decode_mode;
     ctrls[1].value = ctx->start_code;
 
-- 
2.38.1

