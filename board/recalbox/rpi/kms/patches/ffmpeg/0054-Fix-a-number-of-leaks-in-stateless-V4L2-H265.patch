From 31061f34566a6cab8df3463cb2575534ddf2e78a Mon Sep 17 00:00:00 2001
From: John Cox <jc@kynesim.co.uk>
Date: Sat, 18 Sep 2021 16:53:46 +0100
Subject: [PATCH 054/151] Fix a number of leaks in stateless V4L2 H265

Reworks pollqueue to allow better control over the deletion of polltasks
Deletes media polltasks correctly
Empties decoder inuse & free Qs on shutdown
Ensures that other decoder threads aren't running when uninit is called,
  this fixes a crash when SPS changes midstream as that does a
  get_format that does a hw uninit/init
---
 libavcodec/v4l2_req_hevc_vx.c   |   5 +-
 libavcodec/v4l2_req_media.c     | 206 +++++++++++++++++++-------------
 libavcodec/v4l2_req_media.h     |   3 +-
 libavcodec/v4l2_req_pollqueue.c | 153 ++++++++++++++++++------
 libavcodec/v4l2_req_pollqueue.h |   9 +-
 libavcodec/v4l2_request_hevc.c  |  10 +-
 6 files changed, 260 insertions(+), 126 deletions(-)

diff --git a/libavcodec/v4l2_req_hevc_vx.c b/libavcodec/v4l2_req_hevc_vx.c
index c628bd5ab4..c9a8fa7c87 100644
--- a/libavcodec/v4l2_req_hevc_vx.c
+++ b/libavcodec/v4l2_req_hevc_vx.c
@@ -965,13 +965,12 @@ static int v4l2_request_hevc_end_frame(AVCodecContext *avctx)
         }
     }
 
-    decode_q_remove(&ctx->decode_q, &rd->decode_ent);
-
     // Set the drm_prime desriptor
     drm_from_format(&rd->drm, mediabufs_dst_fmt(ctx->mbufs));
     rd->drm.objects[0].fd = dmabuf_fd(qent_dst_dmabuf(rd->qe_dst, 0));
     rd->drm.objects[0].size = dmabuf_size(qent_dst_dmabuf(rd->qe_dst, 0));
 
+    decode_q_remove(&ctx->decode_q, &rd->decode_ent);
     return 0;
 
 fail:
@@ -1087,7 +1086,7 @@ static void v4l2_req_frame_free(void *opaque, uint8_t *data)
 
     av_log(NULL, AV_LOG_DEBUG, "%s: avctx=%p data=%p\n", __func__, avctx, data);
 
-    qent_dst_free(&rd->qe_dst);
+    qent_dst_unref(&rd->qe_dst);
 
     // We don't expect req or qe_src to be set
     if (rd->req || rd->qe_src)
diff --git a/libavcodec/v4l2_req_media.c b/libavcodec/v4l2_req_media.c
index 9fb02b1d98..9e8d6342ca 100644
--- a/libavcodec/v4l2_req_media.c
+++ b/libavcodec/v4l2_req_media.c
@@ -180,8 +180,6 @@ int media_request_fd(const struct media_request * const req)
 
 int media_request_start(struct media_request * const req)
 {
-    struct media_pool * const mp = req->mp;
-
     while (ioctl(req->fd, MEDIA_REQUEST_IOC_QUEUE, NULL) == -1)
     {
         const int err = errno;
@@ -191,7 +189,7 @@ int media_request_start(struct media_request * const req)
         return -err;
     }
 
-    pollqueue_add_task(mp->pq, req->pt, 2000);
+    pollqueue_add_task(req->pt, 2000);
     return 0;
 }
 
@@ -231,6 +229,8 @@ static void delete_req_chain(struct media_request * const chain)
     while (next) {
         struct media_request * const req = next;
         next = req->next;
+        if (req->pt)
+            polltask_delete(&req->pt);
         if (req->fd != -1)
             close(req->fd);
         free(req);
@@ -272,7 +272,7 @@ struct media_pool * media_pool_new(const char * const media_path,
             goto fail4;
         }
 
-        req->pt = polltask_new(req->fd, POLLPRI, media_request_done, req);
+        req->pt = polltask_new(pq, req->fd, POLLPRI, media_request_done, req);
         if (!req->pt)
             goto fail4;
     }
@@ -310,15 +310,17 @@ void media_pool_delete(struct media_pool ** pMp)
 #define INDEX_UNSET (~(uint32_t)0)
 
 enum qent_status {
-    QENT_NEW,
-    QENT_PENDING,
-    QENT_WAITING,
-    QENT_DONE,
-    QENT_ERROR,
+    QENT_NEW = 0,       // Initial state - shouldn't last
+    QENT_FREE,          // On free chain
+    QENT_PENDING,       // User has ent
+    QENT_WAITING,       // On inuse
+    QENT_DONE,          // Frame rx
+    QENT_ERROR,         // Error
     QENT_IMPORT
 };
 
 struct qent_base {
+    atomic_int ref_count;
     struct qent_base *next;
     struct qent_base *prev;
     enum qent_status status;
@@ -334,22 +336,23 @@ struct qent_src {
 
 struct qent_dst {
     struct qent_base base;
-
     bool waiting;
     pthread_mutex_t lock;
     pthread_cond_t cond;
     struct ff_weak_link_client * mbc_wl;
 };
 
+struct qe_list_head {
+    struct qent_base *head;
+    struct qent_base *tail;
+};
 
 struct buf_pool {
     pthread_mutex_t lock;
     sem_t free_sem;
     enum v4l2_buf_type buf_type;
-    struct qent_base *free_head;
-    struct qent_base *free_tail;
-    struct qent_base *inuse_head;
-    struct qent_base *inuse_tail;
+    struct qe_list_head free;
+    struct qe_list_head inuse;
 };
 
 
@@ -365,6 +368,7 @@ static inline struct qent_src *base_to_src(struct qent_base *be)
 
 
 #define QENT_BASE_INITIALIZER {\
+    .ref_count = ATOMIC_VAR_INIT(0),\
     .status = QENT_NEW,\
     .index  = INDEX_UNSET\
 }
@@ -378,7 +382,7 @@ static void qe_base_uninit(struct qent_base *const be)
     }
 }
 
-static void qe_src_delete(struct qent_src *const be_src)
+static void qe_src_free(struct qent_src *const be_src)
 {
     if (!be_src)
         return;
@@ -397,6 +401,18 @@ static struct qent_src * qe_src_new(void)
     return be_src;
 }
 
+static void qe_dst_free(struct qent_dst *const be_dst)
+{
+    if (!be_dst)
+        return;
+
+    ff_weak_link_unref(&be_dst->mbc_wl);
+    pthread_cond_destroy(&be_dst->cond);
+    pthread_mutex_destroy(&be_dst->lock);
+    qe_base_uninit(&be_dst->base);
+    free(be_dst);
+}
+
 static struct qent_dst * qe_dst_new(void)
 {
     struct qent_dst *const be_dst = malloc(sizeof(*be_dst));
@@ -410,55 +426,75 @@ static struct qent_dst * qe_dst_new(void)
     return be_dst;
 }
 
-
-static void bq_put_free(struct buf_pool *const bp, struct qent_base * be)
+static void ql_add_tail(struct qe_list_head * const ql, struct qent_base * be)
 {
-    if (bp->free_tail)
-        bp->free_tail->next = be;
+    if (ql->tail)
+        ql->tail->next = be;
     else
-        bp->free_head = be;
-    be->prev = bp->free_tail;
+        ql->head = be;
+    be->prev = ql->tail;
     be->next = NULL;
-    bp->free_tail = be;
+    ql->tail = be;
 }
 
-static struct qent_base * bq_get_free(struct buf_pool *const bp)
+static struct qent_base * ql_extract(struct qe_list_head * const ql, struct qent_base * be)
 {
-    struct qent_base *be;
-
-    be = bp->free_head;
-    if (be) {
-        if (be->next)
-            be->next->prev = be->prev;
-        else
-            bp->free_tail = be->prev;
-        bp->free_head = be->next;
-        be->next = NULL;
-        be->prev = NULL;
-    }
-    return be;
-}
+    if (!be)
+        return NULL;
 
-static struct qent_base * bq_extract_inuse(struct buf_pool *const bp, struct qent_base *const be)
-{
     if (be->next)
         be->next->prev = be->prev;
     else
-        bp->inuse_tail = be->prev;
+        ql->tail = be->prev;
     if (be->prev)
         be->prev->next = be->next;
     else
-        bp->inuse_head = be->next;
+        ql->head = be->next;
     be->next = NULL;
     be->prev = NULL;
     return be;
 }
 
+
+static void bq_put_free(struct buf_pool *const bp, struct qent_base * be)
+{
+    ql_add_tail(&bp->free, be);
+}
+
+static struct qent_base * bq_get_free(struct buf_pool *const bp)
+{
+    return ql_extract(&bp->free, bp->free.head);
+}
+
+static struct qent_base * bq_extract_inuse(struct buf_pool *const bp, struct qent_base *const be)
+{
+    return ql_extract(&bp->inuse, be);
+}
+
+static struct qent_base * bq_get_inuse(struct buf_pool *const bp)
+{
+    return ql_extract(&bp->inuse, bp->inuse.head);
+}
+
 static void bq_free_all_free_src(struct buf_pool *const bp)
 {
     struct qent_base *be;
     while ((be = bq_get_free(bp)) != NULL)
-        qe_src_delete(base_to_src(be));
+        qe_src_free(base_to_src(be));
+}
+
+static void bq_free_all_inuse_src(struct buf_pool *const bp)
+{
+    struct qent_base *be;
+    while ((be = bq_get_inuse(bp)) != NULL)
+        qe_src_free(base_to_src(be));
+}
+
+static void bq_free_all_free_dst(struct buf_pool *const bp)
+{
+    struct qent_base *be;
+    while ((be = bq_get_free(bp)) != NULL)
+        qe_dst_free(base_to_dst(be));
 }
 
 static void queue_put_free(struct buf_pool *const bp, struct qent_base *be)
@@ -469,6 +505,7 @@ static void queue_put_free(struct buf_pool *const bp, struct qent_base *be)
     /* Clear out state vars */
     be->timestamp.tv_sec = 0;
     be->timestamp.tv_usec = 0;
+    be->status = QENT_FREE;
     for (i = 0; i < VIDEO_MAX_PLANES && be->dh[i]; ++i)
         dmabuf_len_set(be->dh[i], 0);
     bq_put_free(bp, be);
@@ -478,7 +515,7 @@ static void queue_put_free(struct buf_pool *const bp, struct qent_base *be)
 
 static bool queue_is_inuse(const struct buf_pool *const bp)
 {
-    return bp->inuse_tail != NULL;
+    return bp->inuse.tail != NULL;
 }
 
 static void queue_put_inuse(struct buf_pool *const bp, struct qent_base *be)
@@ -486,13 +523,7 @@ static void queue_put_inuse(struct buf_pool *const bp, struct qent_base *be)
     if (!be)
         return;
     pthread_mutex_lock(&bp->lock);
-    if (bp->inuse_tail)
-        bp->inuse_tail->next = be;
-    else
-        bp->inuse_head = be;
-    be->prev = bp->inuse_tail;
-    be->next = NULL;
-    bp->inuse_tail = be;
+    ql_add_tail(&bp->inuse, be);
     be->status = QENT_WAITING;
     pthread_mutex_unlock(&bp->lock);
 }
@@ -527,7 +558,7 @@ static struct qent_base * queue_find_extract_fd(struct buf_pool *const bp, const
 
     pthread_mutex_lock(&bp->lock);
     /* Expect 1st in Q, but allow anywhere */
-    for (be = bp->inuse_head; be; be = be->next) {
+    for (be = bp->inuse.head; be; be = be->next) {
         if (dmabuf_fd(be->dh[0]) == fd) {
             bq_extract_inuse(bp, be);
             break;
@@ -540,14 +571,12 @@ static struct qent_base * queue_find_extract_fd(struct buf_pool *const bp, const
 
 static void queue_delete(struct buf_pool *const bp)
 {
-    if (!bp)
-        return;
     sem_destroy(&bp->free_sem);
     pthread_mutex_destroy(&bp->lock);
     free(bp);
 }
 
-static struct buf_pool* queue_new(const int vfd, struct pollqueue * pq)
+static struct buf_pool* queue_new(const int vfd)
 {
     struct buf_pool *bp = calloc(1, sizeof(*bp));
     if (!bp)
@@ -670,12 +699,14 @@ static struct qent_base * qe_dequeue(struct buf_pool *const bp,
     return be;
 }
 
-static void qe_dst_done(struct qent_dst *const dst_be)
+static void qe_dst_done(struct qent_dst * dst_be)
 {
     pthread_mutex_lock(&dst_be->lock);
     dst_be->waiting = false;
     pthread_cond_broadcast(&dst_be->cond);
     pthread_mutex_unlock(&dst_be->lock);
+
+    qent_dst_unref(&dst_be);
 }
 
 static bool qe_dst_waiting(struct qent_dst *const dst_be)
@@ -699,7 +730,6 @@ static void mediabufs_poll_cb(void * v, short revents)
     struct mediabufs_ctl *mbc = v;
     struct qent_src *src_be = NULL;
     struct qent_dst *dst_be = NULL;
-    bool qrun = false;
 
     if (!revents)
         request_err(mbc->dc, "%s: Timeout\n", __func__);
@@ -715,8 +745,7 @@ static void mediabufs_poll_cb(void * v, short revents)
     /* Reschedule */
     if (mediabufs_wants_poll(mbc)) {
         mbc->polling = true;
-        pollqueue_add_task(mbc->pq, mbc->pt, 2000);
-        qrun = true;
+        pollqueue_add_task(mbc->pt, 2000);
     }
     pthread_mutex_unlock(&mbc->lock);
 
@@ -724,8 +753,6 @@ static void mediabufs_poll_cb(void * v, short revents)
         queue_put_free(mbc->src, &src_be->base);
     if (dst_be)
         qe_dst_done(dst_be);
-    if (!qrun)
-        mediabufs_ctl_unref(&mbc);
 }
 
 int qent_src_params_set(struct qent_src *const be_src, const struct timeval * timestamp)
@@ -824,6 +851,8 @@ MediaBufsStatus mediabufs_start_request(struct mediabufs_ctl *const mbc,
         dst_be->base.timestamp = (struct timeval){0,0};
         if (qe_v4l2_queue(&dst_be->base, mbc->vfd, NULL, &mbc->dst_fmt, true, false))
             goto fail1;
+
+        qent_dst_ref(dst_be);
         queue_put_inuse(mbc->dst, &dst_be->base);
     }
 
@@ -833,8 +862,7 @@ MediaBufsStatus mediabufs_start_request(struct mediabufs_ctl *const mbc,
 
     if (!mbc->polling && mediabufs_wants_poll(mbc)) {
         mbc->polling = true;
-        mediabufs_ctl_ref(mbc);
-        pollqueue_add_task(mbc->pq, mbc->pt, 2000);
+        pollqueue_add_task(mbc->pt, 2000);
     }
     pthread_mutex_unlock(&mbc->lock);
 
@@ -849,8 +877,10 @@ fail1:
         queue_put_free(mbc->src, &src_be->base);
 
 // *** TODO: If src Q fails this doesnt unwind properly - separate dst Q from src Q
-    if (dst_be)
+    if (dst_be) {
+        dst_be->base.status = QENT_ERROR;
         qe_dst_done(dst_be);
+    }
     pthread_mutex_unlock(&mbc->lock);
     return MEDIABUFS_ERROR_OPERATION_FAILED;
 }
@@ -1019,32 +1049,30 @@ MediaBufsStatus qent_dst_read_stop(struct qent_dst *const be_dst)
     return status;
 }
 
-void qent_dst_delete(struct qent_dst *const be_dst)
+struct qent_dst * qent_dst_ref(struct qent_dst * const be_dst)
 {
-    if (!be_dst)
-        return;
-
-    ff_weak_link_unref(&be_dst->mbc_wl);
-    pthread_cond_destroy(&be_dst->cond);
-    pthread_mutex_destroy(&be_dst->lock);
-    qe_base_uninit(&be_dst->base);
-    free(be_dst);
+    if (be_dst)
+        atomic_fetch_add(&be_dst->base.ref_count, 1);
+    return be_dst;
 }
 
-void qent_dst_free(struct qent_dst ** const pbe_dst)
+void qent_dst_unref(struct qent_dst ** const pbe_dst)
 {
     struct qent_dst * const be_dst = *pbe_dst;
     struct mediabufs_ctl * mbc;
     if (!be_dst)
         return;
-
     *pbe_dst = NULL;
+
+    if (atomic_fetch_sub(&be_dst->base.ref_count, 1) != 0)
+        return;
+
     if ((mbc = ff_weak_link_lock(&be_dst->mbc_wl)) != NULL) {
         queue_put_free(mbc->dst, &be_dst->base);
         ff_weak_link_unlock(be_dst->mbc_wl);
     }
     else {
-        qent_dst_delete(be_dst);
+        qe_dst_free(be_dst);
     }
 }
 
@@ -1105,7 +1133,7 @@ struct qent_dst* mediabufs_dst_qent_alloc(struct mediabufs_ctl *const mbc, struc
 
         if ((be_dst->mbc_wl = ff_weak_link_ref(mbc->this_wlm)) == NULL ||
             (index = create_dst_buf(mbc)) < 0) {
-            qent_dst_delete(be_dst);
+            qe_dst_free(be_dst);
             return NULL;
         }
 
@@ -1120,6 +1148,8 @@ struct qent_dst* mediabufs_dst_qent_alloc(struct mediabufs_ctl *const mbc, struc
         return NULL;
     }
 
+    be_dst->base.status = QENT_PENDING;
+    atomic_store(&be_dst->base.ref_count, 0);
     return be_dst;
 }
 
@@ -1175,7 +1205,7 @@ MediaBufsStatus mediabufs_dst_slots_create(struct mediabufs_ctl *const mbc, unsi
 
         index = create_dst_buf(mbc);
         if (index < 0) {
-            qent_dst_delete(be_dst);
+            qe_dst_free(be_dst);
             return MEDIABUFS_ERROR_OPERATION_FAILED;
         }
 
@@ -1189,6 +1219,7 @@ MediaBufsStatus mediabufs_dst_slots_create(struct mediabufs_ctl *const mbc, unsi
 struct qent_src *mediabufs_src_qent_get(struct mediabufs_ctl *const mbc)
 {
     struct qent_base * buf = queue_get_free(mbc->src);
+    buf->status = QENT_PENDING;
     return base_to_src(buf);
 }
 
@@ -1233,7 +1264,7 @@ MediaBufsStatus mediabufs_src_pool_create(struct mediabufs_ctl *const mbc,
             goto fail;
         }
         if (qe_alloc_from_fmt(&be_src->base, dbsc, &mbc->src_fmt)) {
-            qe_src_delete(be_src);
+            qe_src_free(be_src);
             goto fail;
         }
         be_src->base.index = i;
@@ -1399,6 +1430,19 @@ static void mediabufs_ctl_delete(struct mediabufs_ctl *const mbc)
     request_buffers(mbc->vfd, mbc->src_fmt.type, V4L2_MEMORY_MMAP, 0);
     request_buffers(mbc->vfd, mbc->dst_fmt.type, V4L2_MEMORY_MMAP, 0);
 
+    bq_free_all_free_src(mbc->src);
+    bq_free_all_inuse_src(mbc->src);
+    bq_free_all_free_dst(mbc->dst);
+
+    {
+        struct qent_dst *dst_be;
+        while ((dst_be = base_to_dst(bq_get_inuse(mbc->dst))) != NULL) {
+            dst_be->base.timestamp = (struct timeval){0};
+            dst_be->base.status = QENT_ERROR;
+            qe_dst_done(dst_be);
+        }
+    }
+
     queue_delete(mbc->dst);
     queue_delete(mbc->src);
     close(mbc->vfd);
@@ -1489,13 +1533,13 @@ struct mediabufs_ctl * mediabufs_ctl_new(void * const dc, const char * vpath, st
         goto fail1;
     }
 
-    mbc->src = queue_new(mbc->vfd, pq);
+    mbc->src = queue_new(mbc->vfd);
     if (!mbc->src)
         goto fail1;
-    mbc->dst = queue_new(mbc->vfd, pq);
+    mbc->dst = queue_new(mbc->vfd);
     if (!mbc->dst)
         goto fail2;
-    mbc->pt = polltask_new(mbc->vfd, POLLIN | POLLOUT, mediabufs_poll_cb, mbc);
+    mbc->pt = polltask_new(pq, mbc->vfd, POLLIN | POLLOUT, mediabufs_poll_cb, mbc);
     if (!mbc->pt)
         goto fail3;
     mbc->this_wlm = ff_weak_link_new(mbc);
diff --git a/libavcodec/v4l2_req_media.h b/libavcodec/v4l2_req_media.h
index e503773b1a..15a6952748 100644
--- a/libavcodec/v4l2_req_media.h
+++ b/libavcodec/v4l2_req_media.h
@@ -82,7 +82,8 @@ int qent_dst_dup_fd(const struct qent_dst *const be, unsigned int plane);
 MediaBufsStatus qent_dst_wait(struct qent_dst *const be);
 void qent_dst_delete(struct qent_dst *const be);
 // Returns a qent_dst to its mbc free Q or deletes it if the mbc is dead
-void qent_dst_free(struct qent_dst ** const pbe_dst);
+void qent_dst_unref(struct qent_dst ** const pbe_dst);
+struct qent_dst * qent_dst_ref(struct qent_dst * const be_dst);
 
 const uint8_t * qent_dst_data(struct qent_dst *const be, unsigned int buf_no);
 MediaBufsStatus qent_dst_read_start(struct qent_dst *const be);
diff --git a/libavcodec/v4l2_req_pollqueue.c b/libavcodec/v4l2_req_pollqueue.c
index 0f7d9020ee..5c47c50a6f 100644
--- a/libavcodec/v4l2_req_pollqueue.c
+++ b/libavcodec/v4l2_req_pollqueue.c
@@ -2,6 +2,8 @@
 #include <limits.h>
 #include <poll.h>
 #include <pthread.h>
+#include <semaphore.h>
+#include <stdatomic.h>
 #include <stdbool.h>
 #include <stdlib.h>
 #include <stdint.h>
@@ -16,21 +18,32 @@
 
 struct pollqueue;
 
+enum polltask_state {
+    POLLTASK_UNQUEUED = 0,
+    POLLTASK_QUEUED,
+    POLLTASK_RUNNING,
+    POLLTASK_Q_KILL,
+    POLLTASK_RUN_KILL,
+};
+
 struct polltask {
     struct polltask *next;
     struct polltask *prev;
     struct pollqueue *q;
+    enum polltask_state state;
 
     int fd;
-    short events;  /* 0 => deleted */
+    short events;
 
     void (*fn)(void *v, short revents);
     void * v;
 
-    uint64_t timeout; /* 0 => now */
+    uint64_t timeout; /* CLOCK_MONOTONIC time, 0 => never */
+    sem_t kill_sem;
 };
 
 struct pollqueue {
+    atomic_int ref_count;
     pthread_mutex_t lock;
 
     struct polltask *head;
@@ -43,7 +56,8 @@ struct pollqueue {
     pthread_t worker;
 };
 
-struct polltask *polltask_new(const int fd, const short events,
+struct polltask *polltask_new(struct pollqueue *const pq,
+                              const int fd, const short events,
                   void (*const fn)(void *v, short revents),
                   void *const v)
 {
@@ -59,11 +73,15 @@ struct polltask *polltask_new(const int fd, const short events,
     *pt = (struct polltask){
         .next = NULL,
         .prev = NULL,
+        .q = pollqueue_ref(pq),
         .fd = fd,
         .events = events,
         .fn = fn,
         .v = v
     };
+
+    sem_init(&pt->kill_sem, 0, 0);
+
     return pt;
 }
 
@@ -81,14 +99,9 @@ static void pollqueue_rem_task(struct pollqueue *const pq, struct polltask *cons
     pt->prev = NULL;
 }
 
-void polltask_delete(struct polltask **const ppt)
+static void polltask_free(struct polltask * const pt)
 {
-    struct polltask *const pt = *ppt;
-
-    if (!pt)
-        return;
-    *ppt = NULL;
-
+    sem_destroy(&pt->kill_sem);
     free(pt);
 }
 
@@ -98,6 +111,37 @@ static int pollqueue_prod(const struct pollqueue *const pq)
     return write(pq->prod_fd, &one, sizeof(one));
 }
 
+void polltask_delete(struct polltask **const ppt)
+{
+    struct polltask *const pt = *ppt;
+    struct pollqueue * pq;
+    enum polltask_state state;
+    bool prodme;
+
+    if (!pt)
+        return;
+
+    pq = pt->q;
+    pthread_mutex_lock(&pq->lock);
+    state = pt->state;
+    pt->state = (state == POLLTASK_RUNNING) ? POLLTASK_RUN_KILL : POLLTASK_Q_KILL;
+    prodme = !pq->no_prod;
+    pthread_mutex_unlock(&pq->lock);
+
+    if (state != POLLTASK_UNQUEUED) {
+        if (prodme)
+            pollqueue_prod(pq);
+        while (sem_wait(&pt->kill_sem) && errno == EINTR)
+            /* loop */;
+    }
+
+    // Leave zapping the ref until we have DQed the PT as might well be
+    // legitimately used in it
+    *ppt = NULL;
+    polltask_free(pt);
+    pollqueue_unref(&pq);
+}
+
 static uint64_t pollqueue_now(int timeout)
 {
     struct timespec now;
@@ -109,21 +153,24 @@ static uint64_t pollqueue_now(int timeout)
     return now_ms ? now_ms : (uint64_t)1;
 }
 
-void pollqueue_add_task(struct pollqueue *const pq, struct polltask *const pt,
-            const int timeout)
+void pollqueue_add_task(struct polltask *const pt, const int timeout)
 {
-    bool prodme;
+    bool prodme = false;
+    struct pollqueue * const pq = pt->q;
+
     pthread_mutex_lock(&pq->lock);
-    if (pq->tail)
-        pq->tail->next = pt;
-    else
-        pq->head = pt;
-    pt->prev = pq->tail;
-    pt->next = NULL;
-    pt->q = pq;
-    pt->timeout = timeout < 0 ? 0 : pollqueue_now(timeout);
-    pq->tail = pt;
-    prodme = !pq->no_prod;
+    if (pt->state != POLLTASK_Q_KILL && pt->state != POLLTASK_RUN_KILL) {
+        if (pq->tail)
+            pq->tail->next = pt;
+        else
+            pq->head = pt;
+        pt->prev = pq->tail;
+        pt->next = NULL;
+        pt->state = POLLTASK_QUEUED;
+        pt->timeout = timeout < 0 ? 0 : pollqueue_now(timeout);
+        pq->tail = pt;
+        prodme = !pq->no_prod;
+    }
     pthread_mutex_unlock(&pq->lock);
     if (prodme)
         pollqueue_prod(pq);
@@ -147,6 +194,15 @@ static void *poll_thread(void *v)
         for (pt = pq->head; pt; pt = pt->next) {
             int64_t t;
 
+            if (pt->state == POLLTASK_Q_KILL) {
+                struct polltask * const prev = pt->prev;
+                pollqueue_rem_task(pq, pt);
+                sem_post(&pt->kill_sem);
+                if ((pt = prev) == NULL)
+                    break;
+                continue;
+            }
+
             if (n >= asize) {
                 asize = asize ? asize * 2 : 4;
                 a = realloc(a, asize * sizeof(*a));
@@ -189,6 +245,10 @@ static void *poll_thread(void *v)
             if (a[i].revents ||
                 (pt->timeout && (int64_t)(now - pt->timeout) >= 0)) {
                 pollqueue_rem_task(pq, pt);
+                if (pt->state == POLLTASK_QUEUED)
+                    pt->state = POLLTASK_RUNNING;
+                if (pt->state == POLLTASK_Q_KILL)
+                    pt->state = POLLTASK_RUN_KILL;
                 pthread_mutex_unlock(&pq->lock);
 
                 /* This can add new entries to the Q but as
@@ -198,6 +258,10 @@ static void *poll_thread(void *v)
                 pt->fn(pt->v, a[i].revents);
 
                 pthread_mutex_lock(&pq->lock);
+                if (pt->state == POLLTASK_RUNNING)
+                    pt->state = POLLTASK_UNQUEUED;
+                if (pt->state == POLLTASK_RUN_KILL)
+                    sem_post(&pt->kill_sem);
             }
 
             pt = pt_next;
@@ -220,7 +284,7 @@ static void prod_fn(void *v, short revents)
     if (revents)
         read(pq->prod_fd, buf, 8);
     if (!pq->kill)
-        pollqueue_add_task(pq, pq->prod_pt, -1);
+        pollqueue_add_task(pq->prod_pt, -1);
 }
 
 struct pollqueue * pollqueue_new(void)
@@ -229,26 +293,29 @@ struct pollqueue * pollqueue_new(void)
     if (!pq)
         return NULL;
     *pq = (struct pollqueue){
+        .ref_count = ATOMIC_VAR_INIT(0),
+        .lock = PTHREAD_MUTEX_INITIALIZER,
         .head = NULL,
         .tail = NULL,
         .kill = false,
-        .lock = PTHREAD_MUTEX_INITIALIZER,
         .prod_fd = -1
     };
 
     pq->prod_fd = eventfd(0, EFD_NONBLOCK);
     if (pq->prod_fd == 1)
         goto fail1;
-    pq->prod_pt = polltask_new(pq->prod_fd, POLLIN, prod_fn, pq);
+    pq->prod_pt = polltask_new(pq, pq->prod_fd, POLLIN, prod_fn, pq);
     if (!pq->prod_pt)
         goto fail2;
-    pollqueue_add_task(pq, pq->prod_pt, -1);
+    pollqueue_add_task(pq->prod_pt, -1);
     if (pthread_create(&pq->worker, NULL, poll_thread, pq))
         goto fail3;
+    // Reset ref count which will have been inced by the add_task
+    atomic_store(&pq->ref_count, 0);
     return pq;
 
 fail3:
-    polltask_delete(&pq->prod_pt);
+    polltask_free(pq->prod_pt);
 fail2:
     close(pq->prod_fd);
 fail1:
@@ -256,25 +323,41 @@ fail1:
     return NULL;
 }
 
-void pollqueue_delete(struct pollqueue **const ppq)
+static void pollqueue_free(struct pollqueue *const pq)
 {
-    struct pollqueue * pq = *ppq;
     void *rv;
 
-    if (!pq)
-        return;
-    *ppq = NULL;
-
     pthread_mutex_lock(&pq->lock);
     pq->kill = true;
     pollqueue_prod(pq);
     pthread_mutex_unlock(&pq->lock);
 
     pthread_join(pq->worker, &rv);
-    polltask_delete(&pq->prod_pt);
+    polltask_free(pq->prod_pt);
     pthread_mutex_destroy(&pq->lock);
     close(pq->prod_fd);
     free(pq);
 }
 
+struct pollqueue * pollqueue_ref(struct pollqueue *const pq)
+{
+    atomic_fetch_add(&pq->ref_count, 1);
+    return pq;
+}
+
+void pollqueue_unref(struct pollqueue **const ppq)
+{
+    struct pollqueue * const pq = *ppq;
+
+    if (!pq)
+        return;
+    *ppq = NULL;
+
+    if (atomic_fetch_sub(&pq->ref_count, 1) != 0)
+        return;
+
+    pollqueue_free(pq);
+}
+
+
 
diff --git a/libavcodec/v4l2_req_pollqueue.h b/libavcodec/v4l2_req_pollqueue.h
index dcb0d80258..e1182cb2fc 100644
--- a/libavcodec/v4l2_req_pollqueue.h
+++ b/libavcodec/v4l2_req_pollqueue.h
@@ -4,14 +4,15 @@
 struct polltask;
 struct pollqueue;
 
-struct polltask *polltask_new(const int fd, const short events,
+struct polltask *polltask_new(struct pollqueue *const pq,
+			      const int fd, const short events,
 			      void (*const fn)(void *v, short revents),
 			      void *const v);
 void polltask_delete(struct polltask **const ppt);
 
-void pollqueue_add_task(struct pollqueue *const pq, struct polltask *const pt,
-			const int timeout);
+void pollqueue_add_task(struct polltask *const pt, const int timeout);
 struct pollqueue * pollqueue_new(void);
-void pollqueue_delete(struct pollqueue **const ppq);
+void pollqueue_unref(struct pollqueue **const ppq);
+struct pollqueue * pollqueue_ref(struct pollqueue *const pq);
 
 #endif /* POLLQUEUE_H_ */
diff --git a/libavcodec/v4l2_request_hevc.c b/libavcodec/v4l2_request_hevc.c
index 5f287ee75c..18ff8c0e64 100644
--- a/libavcodec/v4l2_request_hevc.c
+++ b/libavcodec/v4l2_request_hevc.c
@@ -89,9 +89,13 @@ static int v4l2_request_hevc_uninit(AVCodecContext *avctx)
 {
     V4L2RequestContextHEVC * const ctx = avctx->internal->hwaccel_priv_data;
 
+    av_log(avctx, AV_LOG_DEBUG, "<<< %s\n", __func__);
+
+    decode_q_wait(&ctx->decode_q, NULL);  // Wait for all other threads to be out of decode
+
     mediabufs_ctl_unref(&ctx->mbufs);
     media_pool_delete(&ctx->mpool);
-    pollqueue_delete(&ctx->pq);
+    pollqueue_unref(&ctx->pq);
     dmabufs_ctl_delete(&ctx->dbufs);
     devscan_delete(&ctx->devscan);
 
@@ -133,6 +137,8 @@ static int v4l2_request_hevc_init(AVCodecContext *avctx)
     const uint32_t src_pix_fmt = V2(ff_v4l2_req_hevc, 1).src_pix_fmt_v4l2;  // Assuming constant for all APIs but avoiding V4L2 includes
     size_t src_size;
 
+    av_log(avctx, AV_LOG_DEBUG, "<<< %s\n", __func__);
+
     if ((ret = devscan_build(avctx, &ctx->devscan)) != 0) {
         av_log(avctx, AV_LOG_WARNING, "Failed to find any V4L2 devices\n");
         return (AVERROR(-ret));
@@ -248,7 +254,7 @@ fail4:
 fail3:
     media_pool_delete(&ctx->mpool);
 fail2:
-    pollqueue_delete(&ctx->pq);
+    pollqueue_unref(&ctx->pq);
 fail1:
     dmabufs_ctl_delete(&ctx->dbufs);
 fail0:
-- 
2.38.1

