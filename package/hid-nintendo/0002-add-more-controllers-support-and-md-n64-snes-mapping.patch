--- a/src/hid-ids.h	2022-10-14 17:10:03.000000000 +0200
+++ b/src/hid-ids.h	2022-10-14 17:13:41.000000000 +0200
@@ -879,6 +879,9 @@
 #define USB_DEVICE_ID_NINTENDO_JOYCONR	0x2007
 #define USB_DEVICE_ID_NINTENDO_PROCON	0x2009
 #define USB_DEVICE_ID_NINTENDO_CHRGGRIP	0x200E
+#define USB_DEVICE_ID_NINTENDO_SNESCON	0x2017
+#define USB_DEVICE_ID_NINTENDO_N64		0x2019
+#define USB_DEVICE_ID_NINTENDO_SEGAGEN	0x201e
 
 #define USB_VENDOR_ID_NOVATEK		0x0603
 #define USB_DEVICE_ID_NOVATEK_PCT	0x0600

 --- a/src/hid-nintendo.c	2022-10-14 17:11:23.000000000 +0200
 +++ b/src/hid-nintendo.c	2022-10-14 17:42:54.000000000 +0200
 @@ -311,6 +311,9 @@
  	JOYCON_CTLR_TYPE_JCL = 0x01,
  	JOYCON_CTLR_TYPE_JCR = 0x02,
  	JOYCON_CTLR_TYPE_PRO = 0x03,
 +	JOYCON_CTLR_TYPE_NESL = 0x09,
 +	JOYCON_CTLR_TYPE_NESR = 0x0A,
 +	JOYCON_CTLR_TYPE_SNES = 0x0B,
  };
 
  struct joycon_stick_cal {
 @@ -357,12 +360,6 @@
  	JOYCON_MSG_TYPE_SUBCMD,
  };
 
 -struct joycon_rumble_output {
 -	u8 output_id;
 -	u8 packet_num;
 -	u8 rumble_data[8];
 -} __packed;
 -
  struct joycon_subcmd_request {
  	u8 output_id; /* must be 0x01 for subcommand, 0x10 for rumble only */
  	u8 packet_num; /* incremented every send */
 @@ -410,7 +407,6 @@
  static const u16 JC_RUMBLE_DFLT_LOW_FREQ = 160;
  static const u16 JC_RUMBLE_DFLT_HIGH_FREQ = 320;
  static const u16 JC_RUMBLE_PERIOD_MS = 50;
 -static const unsigned short JC_RUMBLE_ZERO_AMP_PKT_CNT = 5;
 
  /* Each physical controller is associated with a joycon_ctlr struct */
  struct joycon_ctlr {
 @@ -434,7 +430,6 @@
  	u8 usb_ack_match;
  	u8 subcmd_ack_match;
  	bool received_input_report;
 -	unsigned int last_subcmd_sent_msecs;
 
  	/* factory calibration data */
  	struct joycon_stick_cal left_stick_cal_x;
 @@ -467,7 +462,7 @@
  	u16 rumble_lh_freq;
  	u16 rumble_rl_freq;
  	u16 rumble_rh_freq;
 -	unsigned short rumble_zero_countdown;
 +	bool rumble_zero_amp;
 
  	/* imu */
  	struct input_dev *imu_input;
 @@ -481,24 +476,55 @@
  };
 
  /* Helper macros for checking controller type */
 +#define jc_type_is_nescon(ctlr) \
 +	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_JOYCONR && \
 +	(ctlr->ctlr_type == JOYCON_CTLR_TYPE_NESL || \
 +	ctlr->ctlr_type == JOYCON_CTLR_TYPE_NESR))
  #define jc_type_is_joycon(ctlr) \
 -	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_JOYCONL || \
 +	((ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_JOYCONL || \
  	 ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_JOYCONR || \
 -	 ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_CHRGGRIP)
 +	 ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_CHRGGRIP) && \
 +	 !jc_type_is_nescon(ctlr))
  #define jc_type_is_procon(ctlr) \
  	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_PROCON)
  #define jc_type_is_chrggrip(ctlr) \
  	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_CHRGGRIP)
 +#define jc_type_is_snescon(ctlr) \
 +	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_SNESCON)
 +#define jc_type_is_n64con(ctlr) \
 +	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_N64)
 +#define jc_type_is_segagencon(ctlr) \
 +	(ctlr->hdev->product == USB_DEVICE_ID_NINTENDO_SEGAGEN)
 
  /* Does this controller have inputs associated with left joycon? */
  #define jc_type_has_left(ctlr) \
  	(ctlr->ctlr_type == JOYCON_CTLR_TYPE_JCL || \
 -	 ctlr->ctlr_type == JOYCON_CTLR_TYPE_PRO)
 +	 ctlr->ctlr_type == JOYCON_CTLR_TYPE_PRO) || \
 +	 jc_type_is_n64con(ctlr) || \
 +	 jc_type_is_segagencon(ctlr)
 
  /* Does this controller have inputs associated with right joycon? */
  #define jc_type_has_right(ctlr) \
  	(ctlr->ctlr_type == JOYCON_CTLR_TYPE_JCR || \
 -	 ctlr->ctlr_type == JOYCON_CTLR_TYPE_PRO)
 +	 ctlr->ctlr_type == JOYCON_CTLR_TYPE_PRO) || \
 +	 jc_type_is_n64con(ctlr) || \
 +	 jc_type_is_segagencon(ctlr)
 +
 +/* Can this controller be connected via USB? */
 +#define jc_has_usb(ctlr) \
 +	(jc_type_is_procon(ctlr) || \
 +	jc_type_is_chrggrip(ctlr) || \
 +	jc_type_is_snescon(ctlr) || \
 +	jc_type_is_n64con(ctlr) || \
 +	jc_type_is_segagencon(ctlr))
 +
 +/* Does this controller have motion sensors? */
 +#define jc_has_imu(ctlr) \
 +	(!jc_type_is_nescon(ctlr) && !jc_type_is_snescon(ctlr) && !jc_type_is_n64con(ctlr) && !jc_type_is_segagencon(ctlr))
 +
 +/* Does this controller have rumble? */
 +#define jc_has_rumble(ctlr) \
 +	(!jc_type_is_nescon(ctlr) && !jc_type_is_snescon(ctlr) && !jc_type_is_n64con(ctlr) && !jc_type_is_segagencon(ctlr))
 
  static int __joycon_hid_send(struct hid_device *hdev, u8 *data, size_t len)
  {
 @@ -515,50 +541,6 @@
  	return ret;
  }
 
 -static void joycon_wait_for_input_report(struct joycon_ctlr *ctlr)
 -{
 -	int ret;
 -
 -	/*
 -	 * If we are in the proper reporting mode, wait for an input
 -	 * report prior to sending the subcommand. This improves
 -	 * reliability considerably.
 -	 */
 -	if (ctlr->ctlr_state == JOYCON_CTLR_STATE_READ) {
 -		unsigned long flags;
 -
 -		spin_lock_irqsave(&ctlr->lock, flags);
 -		ctlr->received_input_report = false;
 -		spin_unlock_irqrestore(&ctlr->lock, flags);
 -		ret = wait_event_timeout(ctlr->wait,
 -					 ctlr->received_input_report,
 -					 HZ / 4);
 -		/* We will still proceed, even with a timeout here */
 -		if (!ret)
 -			hid_warn(ctlr->hdev,
 -				 "timeout waiting for input report\n");
 -	}
 -}
 -
 -/*
 - * Sending subcommands and/or rumble data at too high a rate can cause bluetooth
 - * controller disconnections.
 - */
 -static void joycon_enforce_subcmd_rate(struct joycon_ctlr *ctlr)
 -{
 -	static const unsigned int max_subcmd_rate_ms = 25;
 -	unsigned int current_ms = jiffies_to_msecs(jiffies);
 -	unsigned int delta_ms = current_ms - ctlr->last_subcmd_sent_msecs;
 -
 -	while (delta_ms < max_subcmd_rate_ms &&
 -	       ctlr->ctlr_state == JOYCON_CTLR_STATE_READ) {
 -		joycon_wait_for_input_report(ctlr);
 -		current_ms = jiffies_to_msecs(jiffies);
 -		delta_ms = current_ms - ctlr->last_subcmd_sent_msecs;
 -	}
 -	ctlr->last_subcmd_sent_msecs = current_ms;
 -}
 -
  static int joycon_hid_send_sync(struct joycon_ctlr *ctlr, u8 *data, size_t len,
  				u32 timeout)
  {
 @@ -570,7 +552,26 @@
  	 * doing one retry after a timeout appears to always work.
  	 */
  	while (tries--) {
 -		joycon_enforce_subcmd_rate(ctlr);
 +		/*
 +		 * If we are in the proper reporting mode, wait for an input
 +		 * report prior to sending the subcommand. This improves
 +		 * reliability considerably.
 +		 */
 +		if (ctlr->ctlr_state == JOYCON_CTLR_STATE_READ) {
 +			unsigned long flags;
 +
 +			spin_lock_irqsave(&ctlr->lock, flags);
 +			ctlr->received_input_report = false;
 +			spin_unlock_irqrestore(&ctlr->lock, flags);
 +			ret = wait_event_timeout(ctlr->wait, ctlr->received_input_report,
 +						HZ / 4);
 +
 +			/* We will still proceed, even with a timeout here */
 +			if (!ret) {
 +				hid_warn(ctlr->hdev,
 +					 "timeout waiting for input report\n");
 +			}
 +		}
 
  		ret = __joycon_hid_send(ctlr->hdev, data, len);
  		if (ret < 0) {
 @@ -796,12 +797,7 @@
  					    true);
 
  	/* check wether read succeeded and perform plausibility check for retrieved values */
 -	if (ret ||
 -		ctlr->left_stick_cal_x.min >= ctlr->left_stick_cal_x.center ||
 -		ctlr->left_stick_cal_x.center >= ctlr->left_stick_cal_x.max ||
 -		ctlr->left_stick_cal_y.min >= ctlr->left_stick_cal_y.center ||
 -		ctlr->left_stick_cal_y.center >= ctlr->left_stick_cal_y.max
 -	) {
 +	if (ret) {
  		hid_warn(ctlr->hdev,
  			 "Failed to read left stick cal, using dflts; e=%d\n",
  			 ret);
 @@ -822,12 +818,7 @@
  					    false);
 	
  	/* check wether read succeeded and perform plausibility check for retrieved values */
 -	if (ret ||
 -		ctlr->right_stick_cal_x.min >= ctlr->right_stick_cal_x.center ||
 -		ctlr->right_stick_cal_x.center >= ctlr->right_stick_cal_x.max ||
 -		ctlr->right_stick_cal_y.min >= ctlr->right_stick_cal_y.center ||
 -		ctlr->right_stick_cal_y.center >= ctlr->right_stick_cal_y.max
 -	) {
 +	if (ret) {
  		hid_warn(ctlr->hdev,
  			 "Failed to read right stick cal, using dflts; e=%d\n",
  			 ret);
 @@ -1235,18 +1226,10 @@
  	unsigned long msecs = jiffies_to_msecs(jiffies);
 
  	spin_lock_irqsave(&ctlr->lock, flags);
 -	if (IS_ENABLED(CONFIG_NINTENDO_FF) && rep->vibrator_report &&
 +	if (jc_has_rumble(ctlr) && rep->vibrator_report &&
  	    (msecs - ctlr->rumble_msecs) >= JC_RUMBLE_PERIOD_MS &&
  	    (ctlr->rumble_queue_head != ctlr->rumble_queue_tail ||
 -	     ctlr->rumble_zero_countdown > 0)) {
 -		/*
 -		 * When this value reaches 0, we know we've sent multiple
 -		 * packets to the controller instructing it to disable rumble.
 -		 * We can safely stop sending periodic rumble packets until the
 -		 * next ff effect.
 -		 */
 -		if (ctlr->rumble_zero_countdown > 0)
 -			ctlr->rumble_zero_countdown--;
 +	     !ctlr->rumble_zero_amp)) {
  		queue_work(ctlr->rumble_queue, &ctlr->rumble_worker);
  	}
 
 @@ -1281,6 +1264,8 @@
  	/* Parse the buttons and sticks */
  	btns = hid_field_extract(ctlr->hdev, rep->button_status, 0, 24);
 
 +	hid_warn(ctlr->hdev, "btns=%u, button_status=%u\n", btns, rep->button_status);
 +
  	if (jc_type_has_left(ctlr)) {
  		u16 raw_x;
  		u16 raw_y;
 @@ -1371,6 +1356,53 @@
  		input_report_key(dev, BTN_SOUTH, btns & JC_BTN_B);
  	}
 
 +	if (jc_type_is_nescon(ctlr) || jc_type_is_snescon(ctlr) || jc_type_is_n64con(ctlr) || jc_type_is_segagencon(ctlr)) {
 +		s8 x = 0;
 +		s8 y = 0;
 +
 +		if (btns & JC_BTN_LEFT) {
 +			x = -1;
 +		} else if (btns & JC_BTN_RIGHT) {
 +			x = 1;
 +		}
 +
 +		if (btns & JC_BTN_UP) {
 +			y = -1;
 +		} else if (btns & JC_BTN_DOWN) {
 +			y = 1;
 +		}
 +
 +		input_report_abs(dev, ABS_HAT0X, x);
 +		input_report_abs(dev, ABS_HAT0Y, y);
 +
 +		/* report buttons */
 +		input_report_key(dev, BTN_EAST, btns & JC_BTN_A);
 +		input_report_key(dev, BTN_SOUTH, btns & JC_BTN_B);
 +		input_report_key(dev, BTN_TL, btns & JC_BTN_L);
 +		input_report_key(dev, BTN_TR, btns & JC_BTN_R);
 +		input_report_key(dev, BTN_START, btns & JC_BTN_PLUS);
 +
 +		if (jc_type_is_nescon(ctlr) || jc_type_is_snescon(ctlr) || jc_type_is_n64con(ctlr)) {
 +			input_report_key(dev, BTN_SELECT, btns & JC_BTN_MINUS);
 +		}
 +
 +		if (jc_type_is_segagencon(ctlr) || jc_type_is_snescon(ctlr) || jc_type_is_n64con(ctlr)) {
 +			input_report_key(dev, BTN_Z, btns & JC_BTN_CAP);
 +			input_report_key(dev, BTN_MODE, btns & JC_BTN_HOME);
 +			input_report_key(dev, BTN_WEST, btns & JC_BTN_Y);
 +			input_report_key(dev, BTN_TR2, btns & JC_BTN_ZR);
 +			input_report_key(dev, BTN_NORTH, btns & JC_BTN_X);
 +		}
 +
 +		if (jc_type_is_snescon(ctlr) || jc_type_is_n64con(ctlr)) {
 +			input_report_key(dev, BTN_TL2, btns & JC_BTN_ZL);
 +		}
 +
 +		if (jc_type_is_n64con(ctlr)) {
 +			input_report_key(dev, BTN_THUMBL, btns & JC_BTN_LSTICK);
 +		}
 +	}
 +
  	input_sync(dev);
 
  	/*
 @@ -1386,42 +1418,10 @@
  	}
 
  	/* parse IMU data if present */
 -	if (rep->id == JC_INPUT_IMU_DATA)
 +	if (jc_has_imu(ctlr) && rep->id == JC_INPUT_IMU_DATA)
  		joycon_parse_imu_report(ctlr, rep);
  }
 
 -static int joycon_send_rumble_data(struct joycon_ctlr *ctlr)
 -{
 -	int ret;
 -	unsigned long flags;
 -	struct joycon_rumble_output rumble_output = { 0 };
 -
 -	spin_lock_irqsave(&ctlr->lock, flags);
 -	/*
 -	 * If the controller has been removed, just return ENODEV so the LED
 -	 * subsystem doesn't print invalid errors on removal.
 -	 */
 -	if (ctlr->ctlr_state == JOYCON_CTLR_STATE_REMOVED) {
 -		spin_unlock_irqrestore(&ctlr->lock, flags);
 -		return -ENODEV;
 -	}
 -	memcpy(rumble_output.rumble_data,
 -	       ctlr->rumble_data[ctlr->rumble_queue_tail],
 -	       JC_RUMBLE_DATA_SIZE);
 -	spin_unlock_irqrestore(&ctlr->lock, flags);
 -
 -	rumble_output.output_id = JC_OUTPUT_RUMBLE_ONLY;
 -	rumble_output.packet_num = ctlr->subcmd_num;
 -	if (++ctlr->subcmd_num > 0xF)
 -		ctlr->subcmd_num = 0;
 -
 -	joycon_enforce_subcmd_rate(ctlr);
 -
 -	ret = __joycon_hid_send(ctlr->hdev, (u8 *)&rumble_output,
 -				sizeof(rumble_output));
 -	return ret;
 -}
 -
  static void joycon_rumble_worker(struct work_struct *work)
  {
  	struct joycon_ctlr *ctlr = container_of(work, struct joycon_ctlr,
 @@ -1430,9 +1430,13 @@
  	bool again = true;
  	int ret;
 
 +	if (!jc_has_rumble(ctlr)) {
 +		return ;
 +	}
 +
  	while (again) {
  		mutex_lock(&ctlr->output_mutex);
 -		ret = joycon_send_rumble_data(ctlr);
 +		ret = joycon_enable_rumble(ctlr, true);
  		mutex_unlock(&ctlr->output_mutex);
 
  		/* -ENODEV means the controller was just unplugged */
 @@ -1452,7 +1456,6 @@
  	}
  }
 
 -#if IS_ENABLED(CONFIG_NINTENDO_FF)
  static struct joycon_rumble_freq_data joycon_find_rumble_freq(u16 freq)
  {
  	const size_t length = ARRAY_SIZE(joycon_rumble_frequencies);
 @@ -1543,8 +1546,7 @@
  	freq_l_low = ctlr->rumble_ll_freq;
  	freq_l_high = ctlr->rumble_lh_freq;
  	/* limit number of silent rumble packets to reduce traffic */
 -	if (amp_l != 0 || amp_r != 0)
 -		ctlr->rumble_zero_countdown = JC_RUMBLE_ZERO_AMP_PKT_CNT;
 +	ctlr->rumble_zero_amp = (amp_l == 0) && (amp_r == 0);
  	spin_unlock_irqrestore(&ctlr->lock, flags);
 
  	/* right joy-con */
 @@ -1582,7 +1584,6 @@
  				 effect->u.rumble.strong_magnitude,
  				 true);
  }
 -#endif /* IS_ENABLED(CONFIG_NINTENDO_FF) */
 
  static const unsigned int joycon_button_inputs_l[] = {
  	BTN_SELECT, BTN_Z, BTN_THUMBL,
 @@ -1602,6 +1603,27 @@
  	BTN_DPAD_UP, BTN_DPAD_DOWN, BTN_DPAD_LEFT, BTN_DPAD_RIGHT,
  };
 
 +static const unsigned int nescon_button_inputs[] = {
 +	BTN_SELECT, BTN_START, BTN_SOUTH, BTN_EAST, BTN_TL, BTN_TR,
 +	0 /* 0 signals end of array */
 +};
 +
 +static const unsigned int n64_button_inputs[] = {
 +	BTN_SELECT, BTN_START, BTN_SOUTH, BTN_EAST, BTN_NORTH, BTN_WEST, BTN_TL, BTN_TR, BTN_TL2, BTN_TR2, BTN_THUMBL, BTN_Z, BTN_MODE,
 +	0 /* 0 signals end of array */
 +};
 +
 +static const unsigned int snescon_button_inputs[] = {
 +	BTN_SELECT, BTN_START, BTN_SOUTH, BTN_EAST, BTN_NORTH, BTN_WEST,
 +	BTN_TL, BTN_TL2, BTN_TR, BTN_TR2, BTN_Z, BTN_MODE,
 +	0 /* 0 signals end of array */
 +};
 +
 +static const unsigned int segagencon_button_inputs[] = {
 +	BTN_START, BTN_WEST, BTN_SOUTH, BTN_EAST, BTN_NORTH, BTN_TR2, BTN_Z, BTN_MODE, BTN_TL, BTN_TR,
 +	0 /* 0 signals end of array */
 +};
 +
  static int joycon_input_create(struct joycon_ctlr *ctlr)
  {
  	struct hid_device *hdev;
 @@ -1610,15 +1632,6 @@
  	int ret;
  	int i;
 
 -        /*Some 3rd party Switch Pro controllers report Product ID 0x2006
 -          instead of 0x2009.
 -          Check reported controller type and force Product ID to PROCON.
 -        */
 -        if(ctlr->ctlr_type == JOYCON_CTLR_TYPE_PRO &&
 -           ctlr->hdev->product != USB_DEVICE_ID_NINTENDO_PROCON){
 -           ctlr->hdev->product = USB_DEVICE_ID_NINTENDO_PROCON;
 -        }
 -
  	hdev = ctlr->hdev;
 
  	switch (hdev->product) {
 @@ -1640,8 +1653,28 @@
  		imu_name = "Nintendo Switch Left Joy-Con IMU";
  		break;
  	case USB_DEVICE_ID_NINTENDO_JOYCONR:
 -		name = "Nintendo Switch Right Joy-Con";
 -		imu_name = "Nintendo Switch Right Joy-Con IMU";
 +		if (ctlr->ctlr_type == JOYCON_CTLR_TYPE_JCR) {
 +			name = "Nintendo Switch Right Joy-Con";
 +			imu_name = "Nintendo Switch Right Joy-Con IMU";
 +		} else if (ctlr->ctlr_type == JOYCON_CTLR_TYPE_NESL) {
 +			name = "Nintendo Switch NES Controller (L)";
 +			imu_name = NULL;
 +		} else if (ctlr->ctlr_type == JOYCON_CTLR_TYPE_NESR) {
 +			name = "Nintendo Switch NES Controller (R)";
 +			imu_name = NULL;
 +		}
 +		break;
 +	case USB_DEVICE_ID_NINTENDO_SNESCON: // for some reason, bluetooth for genesis is mapped to snescon
 +		name = "Nintendo Switch SNES/SEGA GENESIS Controller";
 +		imu_name = NULL;
 +		break;
 +	case USB_DEVICE_ID_NINTENDO_N64:
 +		name = "Nintendo Switch N64 Controller";
 +		imu_name = NULL;
 +		break;
 +	case USB_DEVICE_ID_NINTENDO_SEGAGEN:
 +		name = "Nintendo Switch SEGA GENESIS Controller";
 +		imu_name = NULL;
  		break;
  	default: /* Should be impossible */
  		hid_err(hdev, "Invalid hid product\n");
 @@ -1699,6 +1732,42 @@
  					     joycon_button_inputs_r[i]);
  	}
 
 +	if (jc_type_is_nescon(ctlr) || jc_type_is_snescon(ctlr) || jc_type_is_n64con(ctlr) || jc_type_is_segagencon(ctlr)) {
 +		unsigned int* inputs;
 +
 +		if (jc_type_is_n64con(ctlr)) {
 +			inputs = n64_button_inputs;
 +		} else if (jc_type_is_segagencon(ctlr)) {
 +			inputs = segagencon_button_inputs;
 +		} else if (jc_type_is_snescon(ctlr)) {
 +			inputs = snescon_button_inputs;
 +		} else {
 +			inputs = nescon_button_inputs;
 +		}
 +
 +		/* set up d-pad hat */
 +		input_set_abs_params(ctlr->input, ABS_HAT0X,
 +					 -JC_MAX_DPAD_MAG, JC_MAX_DPAD_MAG,
 +					 JC_DPAD_FUZZ, JC_DPAD_FLAT);
 +		input_set_abs_params(ctlr->input, ABS_HAT0Y,
 +					 -JC_MAX_DPAD_MAG, JC_MAX_DPAD_MAG,
 +					 JC_DPAD_FUZZ, JC_DPAD_FLAT);
 +
 +		/* set up buttons */
 +		for (i = 0; inputs[i] > 0; i++) {
 +			input_set_capability(ctlr->input, EV_KEY, inputs[i]);
 +		}
 +
 +		/* register the device here, we don't need any more setup */
 +		ret = input_register_device(ctlr->input);
 +
 +		if (ret) {
 +			return ret;
 +		}
 +
 +		return 0;
 +	}
 +
  	/* Let's report joy-con S triggers separately */
  	if (hdev->product == USB_DEVICE_ID_NINTENDO_JOYCONL) {
  		input_set_capability(ctlr->input, EV_KEY, BTN_TR);
 @@ -1708,7 +1777,6 @@
  		input_set_capability(ctlr->input, EV_KEY, BTN_TL2);
  	}
 
 -#if IS_ENABLED(CONFIG_NINTENDO_FF)
  	/* set up rumble */
  	input_set_capability(ctlr->input, EV_FF, FF_RUMBLE);
  	input_ff_create_memless(ctlr->input, NULL, joycon_play_effect);
 @@ -1719,7 +1787,6 @@
  	joycon_clamp_rumble_freqs(ctlr);
  	joycon_set_rumble(ctlr, 0, 0, false);
  	ctlr->rumble_msecs = jiffies_to_msecs(jiffies);
 -#endif
 
  	ret = input_register_device(ctlr->input);
  	if (ret)
 @@ -1923,7 +1990,7 @@
  		/* Set the home LED to 0 as default state */
  		ret = joycon_home_led_brightness_set(led, 0);
  		if (ret) {
 -			hid_warn(hdev, "Failed to set home LED dflt; ret=%d\n",
 +			hid_err(hdev, "Failed to set home LED dflt; ret=%d\n",
  									ret);
  			return ret;
  		}
 @@ -2190,9 +2257,11 @@
 
  	/* Initialize the controller */
  	mutex_lock(&ctlr->output_mutex);
 -	/* if handshake command fails, assume ble pro controller */
 -	if ((jc_type_is_procon(ctlr) || jc_type_is_chrggrip(ctlr)) &&
 -	    !joycon_send_usb(ctlr, JC_USB_CMD_HANDSHAKE, HZ)) {
 +	/* if handshake command fails, assume ble pro controller
 +	 * makes sure that the bus is not bluetooth case for n64 and sega
 +	 * controllers it causes it to fail if bluetooth is used
 +	 */
 +	if (jc_has_usb(ctlr) && !joycon_send_usb(ctlr, JC_USB_CMD_HANDSHAKE, HZ)) {
  		hid_dbg(hdev, "detected USB controller\n");
  		/* set baudrate for improved latency */
  		ret = joycon_send_usb(ctlr, JC_USB_CMD_BAUDRATE_3M, HZ);
 @@ -2249,27 +2318,29 @@
  		}
  	}
 
 -	/* Enable rumble */
 -	ret = joycon_enable_rumble(ctlr, true);
 -	if (ret) {
 -		if (ignore_init_failure < 1) {
 -			hid_err(hdev, "Failed to enable rumble; ret=%d\n", ret);
 -			goto err_mutex;
 -		} else {
 -			hid_warn(hdev, "Failed to enable rumble, ignoring; ret=%d\n",
 -				ret);
 +	if (!jc_type_is_nescon(ctlr) && !jc_type_is_snescon(ctlr) && !jc_type_is_n64con(ctlr) && !jc_type_is_segagencon(ctlr)) {
 +		/* Enable rumble */
 +		ret = joycon_enable_rumble(ctlr, true);
 +		if (ret) {
 +			if (ignore_init_failure < 1) {
 +				hid_err(hdev, "Failed to enable rumble; ret=%d\n", ret);
 +				goto err_mutex;
 +			} else {
 +				hid_warn(hdev, "Failed to enable rumble, ignoring; ret=%d\n",
 +					ret);
 +			}
  		}
 -	}
 
 -	/* Enable the IMU */
 -	ret = joycon_enable_imu(ctlr, true);
 -	if (ret) {
 -		if (ignore_init_failure < 1) {
 -			hid_err(hdev, "Failed to enable the IMU; ret=%d\n", ret);
 -			goto err_mutex;
 -		} else {
 -			hid_warn(hdev, "Failed to enable the IMU, ignoring; ret=%d\n",
 -				ret);
 +		/* Enable the IMU */
 +		ret = joycon_enable_imu(ctlr, true);
 +		if (ret) {
 +			if (ignore_init_failure < 1) {
 +				hid_err(hdev, "Failed to enable the IMU; ret=%d\n", ret);
 +				goto err_mutex;
 +			} else {
 +				hid_warn(hdev, "Failed to enable the IMU, ignoring; ret=%d\n",
 +					ret);
 +			}
  		}
  	}
 
 @@ -2292,7 +2363,8 @@
  	ret = joycon_leds_create(ctlr);
  	if (ret) {
  		// some 3rd-party controllers do not have LEDs
 -		hid_warn(hdev, "Failed to create leds; ret=%d\n", ret);
 +		hid_err(hdev, "Failed to create leds; ret=%d\n", ret);
 +		goto err_close;
  	}
 
  	/* Initialize the battery power supply */
 @@ -2361,6 +2433,18 @@
  			 USB_DEVICE_ID_NINTENDO_JOYCONL) },
  	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_NINTENDO,
  			 USB_DEVICE_ID_NINTENDO_JOYCONR) },
 +	{ HID_USB_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_SNESCON) },
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_SNESCON) },
 +	{ HID_USB_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_N64) },
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_N64) },
 +	{ HID_USB_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_SEGAGEN) },
 +	{ HID_BLUETOOTH_DEVICE(USB_VENDOR_ID_NINTENDO,
 +			 USB_DEVICE_ID_NINTENDO_SEGAGEN) },
  	{ }
  };
  MODULE_DEVICE_TABLE(hid, nintendo_hid_devices);
